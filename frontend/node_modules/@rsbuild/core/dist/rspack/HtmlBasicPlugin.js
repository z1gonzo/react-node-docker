"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var HtmlBasicPlugin_exports = {};
__export(HtmlBasicPlugin_exports, {
  HtmlBasicPlugin: () => HtmlBasicPlugin,
  hasTitle: () => hasTitle
});
module.exports = __toCommonJS(HtmlBasicPlugin_exports);
var import_htmlPluginUtil = require("../provider/htmlPluginUtil");
const hasTitle = (html) => html ? /<title/i.test(html) && /<\/title/i.test(html) : false;
class HtmlBasicPlugin {
  constructor(options) {
    this.name = "HtmlBasicPlugin";
    this.options = options;
  }
  apply(compiler) {
    const addTitleTag = (headTags, title = "") => {
      headTags.unshift({
        tagName: "title",
        innerHTML: title,
        attributes: {},
        voidTag: false,
        meta: {}
      });
    };
    const addFavicon = (headTags, entryName) => {
      const { favicon } = this.options.info[entryName];
      if (favicon) {
        headTags.unshift({
          tagName: "link",
          voidTag: true,
          attributes: {
            rel: "icon",
            href: favicon
          },
          meta: {}
        });
      }
    };
    compiler.hooks.compilation.tap(this.name, (compilation) => {
      (0, import_htmlPluginUtil.getHTMLPlugin)().getHooks(compilation).alterAssetTagGroups.tap(this.name, (data) => {
        const entryName = data.plugin.options?.entryName;
        if (!entryName) {
          return data;
        }
        const { headTags } = data;
        const { templateContent } = this.options.info[entryName];
        if (!hasTitle(templateContent)) {
          addTitleTag(headTags, data.plugin.options?.title);
        }
        addFavicon(headTags, entryName);
        return data;
      });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HtmlBasicPlugin,
  hasTitle
});
