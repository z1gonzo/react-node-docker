"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var nodeAddons_exports = {};
__export(nodeAddons_exports, {
  pluginNodeAddons: () => pluginNodeAddons
});
module.exports = __toCommonJS(nodeAddons_exports);
var import_path = require("path");
var import_shared = require("@rsbuild/shared");
const pluginNodeAddons = () => ({
  name: "rsbuild:node-addons",
  setup(api) {
    api.modifyBundlerChain(
      async (chain, { isServer, isServiceWorker, CHAIN_ID }) => {
        if (!isServer && !isServiceWorker) {
          return;
        }
        const getDistName = (resourcePath) => {
          const pkgJSON = (0, import_shared.findUpSync)({
            filename: "package.json",
            cwd: (0, import_path.dirname)(resourcePath)
          });
          if (!pkgJSON) {
            throw new Error(
              `Failed to compile Node.js addons, couldn't find the package.json of ${import_shared.color.yellow(
                resourcePath
              )}.`
            );
          }
          const getFilename = (resource, pkgName2) => {
            const reg = new RegExp(`node_modules/${pkgName2}/(.+)`);
            const match = resource.match(reg);
            const filename = match?.[1];
            if (!filename) {
              return "[name].[ext]";
            }
            return `${filename}`;
          };
          const { name: pkgName } = require(pkgJSON);
          const config = api.getNormalizedConfig();
          const serverPath = (0, import_shared.getDistPath)(config, "server");
          return `${serverPath}/${getFilename(resourcePath, pkgName)}`;
        };
        chain.module.rule(CHAIN_ID.RULE.NODE).test(/\.node$/).use(CHAIN_ID.USE.NODE).loader((0, import_shared.getSharedPkgCompiledPath)("node-loader")).options({
          name: getDistName
        });
      }
    );
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  pluginNodeAddons
});
