"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var helper_exports = {};
__export(helper_exports, {
  HMR_SOCK_PATH: () => HMR_SOCK_PATH,
  formatRoutes: () => formatRoutes,
  getDevOptions: () => getDevOptions,
  getServerOptions: () => getServerOptions,
  mergeDevOptions: () => mergeDevOptions,
  printServerURLs: () => printServerURLs
});
module.exports = __toCommonJS(helper_exports);
var import_shared = require("@rsbuild/shared");
const formatRoutes = (entry, prefix, outputStructure) => {
  return Object.keys(entry).map((name) => ({
    name,
    route: (prefix ? `${prefix}/` : "") + // fix case: /html/index/index.html
    (name === "index" && outputStructure !== "nested" ? "" : name)
  })).sort((a) => a.name === "index" ? -1 : 1);
};
function printServerURLs({
  urls,
  port,
  routes,
  protocol,
  printUrls,
  logger = import_shared.logger
}) {
  if (printUrls === false) {
    return;
  }
  if ((0, import_shared.isFunction)(printUrls)) {
    printUrls({
      urls: urls.map((item) => item.url),
      port,
      protocol
    });
    return;
  }
  let message = "";
  if (routes.length === 1) {
    message = urls.map(
      ({ label, url }) => `  ${`> ${label.padEnd(10)}`}${import_shared.color.cyan(
        (0, import_shared.normalizeUrl)(`${url}/${routes[0].route}`)
      )}
`
    ).join("");
  } else {
    const maxNameLength = Math.max(...routes.map((r) => r.name.length));
    urls.forEach(({ label, url }, index) => {
      if (index > 0) {
        message += "\n";
      }
      message += `  ${`> ${label}`}
`;
      routes.forEach((r) => {
        message += `  ${import_shared.color.dim("-")} ${import_shared.color.dim(
          r.name.padEnd(maxNameLength + 4)
        )}${import_shared.color.cyan((0, import_shared.normalizeUrl)(`${url}/${r.route}`))}
`;
      });
    });
  }
  logger.log(message);
}
const HMR_SOCK_PATH = "/rsbuild-hmr";
const mergeDevOptions = ({
  rsbuildConfig,
  port
}) => {
  const defaultDevConfig = {
    client: {
      path: HMR_SOCK_PATH,
      port: port.toString(),
      // By default it is set to "location.hostname"
      host: "",
      // By default it is set to "location.protocol === 'https:' ? 'wss' : 'ws'""
      protocol: ""
    },
    writeToDisk: false
  };
  const devConfig = rsbuildConfig.dev ? (0, import_shared.deepmerge)(defaultDevConfig, rsbuildConfig.dev) : defaultDevConfig;
  return devConfig;
};
const getServerOptions = async ({
  rsbuildConfig,
  getPortSilently
}) => {
  const host = rsbuildConfig.server?.host || import_shared.DEFAULT_DEV_HOST;
  const port = await (0, import_shared.getPort)({
    host,
    port: rsbuildConfig.server?.port || import_shared.DEFAULT_PORT,
    strictPort: rsbuildConfig.server?.strictPort || false,
    silent: getPortSilently
  });
  const https = Boolean(rsbuildConfig.server?.https) || false;
  return { port, host, https, serverConfig: rsbuildConfig.server || {} };
};
const getDevOptions = async ({
  rsbuildConfig,
  getPortSilently
}) => {
  const { port, host, https, serverConfig } = await getServerOptions({
    rsbuildConfig,
    getPortSilently
  });
  const devConfig = mergeDevOptions({ rsbuildConfig, port });
  return {
    devServerConfig: {
      ...serverConfig,
      ...devConfig
    },
    port,
    host,
    https
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HMR_SOCK_PATH,
  formatRoutes,
  getDevOptions,
  getServerOptions,
  mergeDevOptions,
  printServerURLs
});
