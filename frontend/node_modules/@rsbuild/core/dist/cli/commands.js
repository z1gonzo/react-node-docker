"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var commands_exports = {};
__export(commands_exports, {
  init: () => init,
  runCli: () => runCli
});
module.exports = __toCommonJS(commands_exports);
var import_path = require("path");
var import_fs = require("fs");
var import_shared = require("@rsbuild/shared");
var import_commander = require("@rsbuild/shared/commander");
var import_loadEnv = require("../loadEnv");
var import_config = require("./config");
var import_restart = require("../server/restart");
let commonOpts = {};
async function init({
  cliOptions,
  isRestart
}) {
  if (cliOptions) {
    commonOpts = cliOptions;
  }
  try {
    const root = process.cwd();
    const envs = (0, import_loadEnv.loadEnv)({ cwd: root });
    (0, import_shared.isDev)() && (0, import_restart.onBeforeRestartServer)(envs.cleanup);
    const config = await (0, import_config.loadConfig)({
      cwd: root,
      path: commonOpts.config
    });
    const { createRsbuild } = await Promise.resolve().then(() => __toESM(require("../createRsbuild")));
    config.source || (config.source = {});
    config.source.define = {
      ...envs.publicVars,
      ...config.source.define
    };
    if (commonOpts.open && !config.dev?.startUrl) {
      config.dev || (config.dev = {});
      config.dev.startUrl = commonOpts.open;
    }
    if (commonOpts.host) {
      config.server || (config.server = {});
      config.server.host = commonOpts.host;
    }
    if (commonOpts.port) {
      config.server || (config.server = {});
      config.server.port = commonOpts.port;
    }
    return await createRsbuild({
      cwd: root,
      rsbuildConfig: config
    });
  } catch (err) {
    if (isRestart) {
      import_shared.logger.error(err);
    } else {
      throw err;
    }
  }
}
function runCli() {
  import_commander.program.name("rsbuild").usage("<command> [options]").version("0.2.18");
  import_commander.program.command("dev").option("--open [url]", "open the page in browser on startup").option(
    "--port <port>",
    "specify a port number for Rsbuild Server to listen"
  ).option(
    "--host <host>",
    "specify the host that the Rsbuild Server listens to"
  ).option(
    "-c --config <config>",
    "specify the configuration file, can be a relative or absolute path"
  ).description("starting the dev server").action(async (options) => {
    try {
      const rsbuild = await init({ cliOptions: options });
      await rsbuild?.startDevServer();
    } catch (err) {
      import_shared.logger.error("Failed to start dev server.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  import_commander.program.command("build").option(`-w --watch`, "turn on watch mode, watch for changes and rebuild").option(
    "-c --config <config>",
    "specify the configuration file, can be a relative or absolute path"
  ).description("build the app for production").action(async (options) => {
    try {
      const rsbuild = await init({ cliOptions: options });
      await rsbuild?.build({
        watch: options.watch
      });
    } catch (err) {
      import_shared.logger.error("Failed to build.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  import_commander.program.command("preview").option("--open [url]", "open the page in browser on startup").option(
    "--port <port>",
    "specify a port number for Rsbuild Server to listen"
  ).option(
    "--host <host>",
    "specify the host that the Rsbuild Server listens to"
  ).option(
    "-c --config <config>",
    "specify the configuration file, can be a relative or absolute path"
  ).description("preview the production build locally").action(async (options) => {
    try {
      const rsbuild = await init({ cliOptions: options });
      if (rsbuild && !(0, import_fs.existsSync)(rsbuild.context.distPath)) {
        throw new Error(
          `The output directory ${import_shared.color.yellow(
            rsbuild.context.distPath
          )} does not exist, please build the project before previewing.`
        );
      }
      await rsbuild?.preview();
    } catch (err) {
      import_shared.logger.error("Failed to start preview server.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  import_commander.program.command("inspect").description("inspect the Rspack and Rsbuild configs").option(`--env <env>`, "specify env mode", "development").option("--output <output>", "specify inspect content output path", "/").option("--verbose", "show full function definitions in output").option(
    "-c --config <config>",
    "specify the configuration file, can be a relative or absolute path"
  ).action(async (options) => {
    try {
      const rsbuild = await init({ cliOptions: options });
      await rsbuild?.inspectConfig({
        env: options.env,
        verbose: options.verbose,
        outputPath: (0, import_path.join)(rsbuild.context.distPath, options.output),
        writeToDisk: true
      });
    } catch (err) {
      import_shared.logger.error("Failed to inspect config.");
      import_shared.logger.error(err);
      process.exit(1);
    }
  });
  import_commander.program.parse();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  init,
  runCli
});
