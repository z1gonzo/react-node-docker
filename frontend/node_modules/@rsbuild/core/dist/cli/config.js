"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var config_exports = {};
__export(config_exports, {
  defineConfig: () => defineConfig,
  loadConfig: () => loadConfig
});
module.exports = __toCommonJS(config_exports);
var import_fs = __toESM(require("fs"));
var import_path = require("path");
var import_shared = require("@rsbuild/shared");
var import_loadEnv = require("../loadEnv");
var import_restart = require("../server/restart");
function defineConfig(config) {
  return config;
}
const resolveConfigPath = (root, customConfig) => {
  if (customConfig) {
    const customConfigPath = (0, import_path.isAbsolute)(customConfig) ? customConfig : (0, import_path.join)(root, customConfig);
    if (import_fs.default.existsSync(customConfigPath)) {
      return customConfigPath;
    }
    import_shared.logger.warn(`Cannot find config file: ${import_shared.color.dim(customConfigPath)}
`);
  }
  const CONFIG_FILES = [
    "rsbuild.config.ts",
    "rsbuild.config.js",
    "rsbuild.config.mjs",
    "rsbuild.config.cjs",
    "rsbuild.config.mts",
    "rsbuild.config.cts"
  ];
  for (const file of CONFIG_FILES) {
    const configFile = (0, import_path.join)(root, file);
    if (import_fs.default.existsSync(configFile)) {
      return configFile;
    }
  }
  return null;
};
async function watchConfig(root, configFile) {
  const chokidar = await Promise.resolve().then(() => __toESM(require("@rsbuild/shared/chokidar")));
  const envFiles = (0, import_loadEnv.getEnvFiles)().map((filename) => (0, import_path.join)(root, filename));
  const watcher = chokidar.watch([configFile, ...envFiles], {
    // do not trigger add for initial files
    ignoreInitial: true,
    // If watching fails due to read permissions, the errors will be suppressed silently.
    ignorePermissionErrors: true
  });
  const callback = (0, import_shared.debounce)(
    async (filePath) => {
      watcher.close();
      await (0, import_restart.restartDevServer)({ filePath });
    },
    // set 300ms debounce to avoid restart frequently
    300
  );
  watcher.on("add", callback);
  watcher.on("change", callback);
  watcher.on("unlink", callback);
}
async function loadConfig({
  cwd,
  path
}) {
  const configFile = resolveConfigPath(cwd, path);
  if (!configFile) {
    return {};
  }
  try {
    const { default: jiti } = await Promise.resolve().then(() => __toESM(require("@rsbuild/shared/jiti")));
    const loadConfig2 = jiti(__filename, {
      esmResolve: true,
      // disable require cache to support restart CLI and read the new config
      requireCache: false,
      interopDefault: true
    });
    const command = process.argv[2];
    if (command === "dev") {
      watchConfig(cwd, configFile);
    }
    const configExport = loadConfig2(configFile);
    if (typeof configExport === "function") {
      const params = {
        env: process.env.NODE_ENV,
        command
      };
      const result = await configExport(params);
      if (result === void 0) {
        throw new Error("Rsbuild config function must return a config object.");
      }
      return result;
    }
    return configExport;
  } catch (err) {
    import_shared.logger.error(`Failed to load file: ${import_shared.color.dim(configFile)}`);
    throw err;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defineConfig,
  loadConfig
});
