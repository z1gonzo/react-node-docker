"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var inspectConfig_exports = {};
__export(inspectConfig_exports, {
  inspectConfig: () => inspectConfig
});
module.exports = __toCommonJS(inspectConfig_exports);
var import_path = require("path");
var import_initConfigs = require("./initConfigs");
var import_shared = require("@rsbuild/shared");
async function inspectConfig({
  context,
  pluginStore,
  rsbuildOptions,
  bundlerConfigs,
  inspectOptions = {}
}) {
  if (inspectOptions.env) {
    process.env.NODE_ENV = inspectOptions.env;
  } else if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = "development";
  }
  const rspackConfigs = bundlerConfigs || (await (0, import_initConfigs.initConfigs)({
    context,
    pluginStore,
    rsbuildOptions
  })).rspackConfigs;
  const rsbuildDebugConfig = {
    ...context.normalizedConfig,
    pluginNames: pluginStore.plugins.map((p) => p.name)
  };
  const rawRsbuildConfig = await (0, import_shared.stringifyConfig)(
    rsbuildDebugConfig,
    inspectOptions.verbose
  );
  const rawBundlerConfigs = await Promise.all(
    rspackConfigs.map(
      (config) => (0, import_shared.stringifyConfig)(config, inspectOptions.verbose)
    )
  );
  let outputPath = inspectOptions.outputPath || context.distPath;
  if (!(0, import_path.isAbsolute)(outputPath)) {
    outputPath = (0, import_path.join)(context.rootPath, outputPath);
  }
  if (inspectOptions.writeToDisk) {
    await (0, import_shared.outputInspectConfigFiles)({
      rsbuildConfig: context.normalizedConfig,
      rawRsbuildConfig,
      bundlerConfigs: rawBundlerConfigs,
      inspectOptions: {
        ...inspectOptions,
        outputPath
      },
      configType: "rspack"
    });
  }
  return {
    rsbuildConfig: rawRsbuildConfig,
    bundlerConfigs: rawBundlerConfigs,
    origin: {
      rsbuildConfig: rsbuildDebugConfig,
      bundlerConfigs: rspackConfigs
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  inspectConfig
});
