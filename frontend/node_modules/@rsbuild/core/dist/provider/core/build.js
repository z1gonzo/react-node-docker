"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var build_exports = {};
__export(build_exports, {
  build: () => build,
  rspackBuild: () => rspackBuild
});
module.exports = __toCommonJS(build_exports);
var import_createCompiler = require("./createCompiler");
var import_initConfigs = require("./initConfigs");
var import_shared = require("@rsbuild/shared");
const rspackBuild = async (compiler) => {
  return new Promise((resolve, reject) => {
    compiler.run((err, stats) => {
      if (err || stats?.hasErrors()) {
        const buildError = err || new Error("Rspack build failed!");
        reject(buildError);
      } else {
        compiler.close(() => {
          resolve({ stats });
        });
      }
    });
  });
};
const build = async (initOptions, { mode = "production", watch, compiler: customCompiler } = {}, executer) => {
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = mode;
  }
  const { context } = initOptions;
  let compiler;
  let bundlerConfigs;
  if (customCompiler) {
    compiler = customCompiler;
  } else {
    const { rspackConfigs } = await (0, import_initConfigs.initConfigs)(initOptions);
    compiler = await (0, import_createCompiler.createCompiler)({
      context,
      rspackConfigs
    });
    bundlerConfigs = rspackConfigs;
  }
  await context.hooks.onBeforeBuildHook.call({
    bundlerConfigs
  });
  if (watch) {
    compiler.watch({}, (err) => {
      if (err) {
        import_shared.logger.error(err);
      }
    });
  } else {
    const executeResult = await executer?.(compiler);
    await context.hooks.onAfterBuildHook.call({
      stats: executeResult?.stats
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  build,
  rspackBuild
});
