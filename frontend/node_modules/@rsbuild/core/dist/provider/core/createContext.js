"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createContext_exports = {};
__export(createContext_exports, {
  createContext: () => createContext,
  createContextByConfig: () => createContextByConfig,
  createPublicContext: () => createPublicContext,
  updateContextByNormalizedConfig: () => updateContextByNormalizedConfig
});
module.exports = __toCommonJS(createContext_exports);
var import_path = require("path");
var import_shared = require("@rsbuild/shared");
var import_initHooks = require("./initHooks");
var import_config = require("../config");
function getDefaultEntry(root) {
  const files = [
    // Most projects are using typescript now.
    // So we put `.ts` as the first one to improve performance.
    "ts",
    "js",
    "tsx",
    "jsx",
    ".mjs",
    ".cjs"
  ].map((ext) => (0, import_path.join)(root, `src/index.${ext}`));
  const entryFile = (0, import_shared.findExists)(files);
  if (entryFile) {
    return {
      index: entryFile
    };
  }
  return {};
}
function getAbsoluteDistPath(cwd, config) {
  const root = (0, import_shared.getDistPath)(config, "root");
  return (0, import_path.isAbsolute)(root) ? root : (0, import_path.join)(cwd, root);
}
function createContextByConfig(options, bundlerType, config = {}) {
  const { cwd } = options;
  const rootPath = cwd;
  const distPath = getAbsoluteDistPath(cwd, config);
  const cachePath = (0, import_path.join)(rootPath, "node_modules", ".cache");
  const context = {
    entry: config.source?.entry || getDefaultEntry(rootPath),
    targets: config.output?.targets || [],
    version: "0.2.18",
    rootPath,
    distPath,
    cachePath,
    bundlerType
  };
  return context;
}
function updateContextByNormalizedConfig(context, config) {
  context.targets = config.output.targets;
  context.distPath = getAbsoluteDistPath(context.rootPath, config);
  if (config.source.entry) {
    context.entry = config.source.entry;
  }
}
function createPublicContext(context) {
  const exposedKeys = [
    "entry",
    "targets",
    "version",
    "rootPath",
    "distPath",
    "devServer",
    "cachePath",
    "configPath",
    "tsconfigPath",
    "bundlerType"
  ];
  return new Proxy(context, {
    get(target, prop) {
      if (exposedKeys.includes(prop)) {
        return target[prop];
      }
      return void 0;
    },
    set(_, prop) {
      import_shared.logger.error(
        `Context is readonly, you can not assign to the "context.${prop}" prop.`
      );
      return true;
    }
  });
}
async function createContext(options, userRsbuildConfig, bundlerType) {
  const rsbuildConfig = (0, import_config.withDefaultConfig)(userRsbuildConfig);
  const context = createContextByConfig(options, bundlerType, rsbuildConfig);
  const tsconfigPath = (0, import_path.join)(context.rootPath, import_shared.TS_CONFIG_FILE);
  return {
    ...context,
    hooks: (0, import_initHooks.initHooks)(),
    config: { ...rsbuildConfig },
    originalConfig: userRsbuildConfig,
    tsconfigPath: await (0, import_shared.isFileExists)(tsconfigPath) ? tsconfigPath : void 0
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createContext,
  createContextByConfig,
  createPublicContext,
  updateContextByNormalizedConfig
});
