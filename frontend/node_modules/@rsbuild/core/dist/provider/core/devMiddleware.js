"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var devMiddleware_exports = {};
__export(devMiddleware_exports, {
  getDevMiddleware: () => getDevMiddleware
});
module.exports = __toCommonJS(devMiddleware_exports);
var import_webpack_dev_middleware = __toESM(require("@rsbuild/shared/webpack-dev-middleware"));
var import_shared = require("@rsbuild/shared");
function applyHMREntry(compiler, clientPath) {
  if (!(0, import_shared.isClientCompiler)(compiler)) {
    return;
  }
  new compiler.webpack.EntryPlugin(compiler.context, clientPath, {
    name: void 0
  }).apply(compiler);
}
const getDevMiddleware = (multiCompiler) => (options) => {
  const { hmrClientPath, callbacks, ...restOptions } = options;
  const setupCompiler = (compiler) => {
    if (hmrClientPath) {
      applyHMREntry(compiler, hmrClientPath);
    }
    (0, import_shared.setupServerHooks)(compiler, callbacks);
  };
  if (multiCompiler.compilers) {
    multiCompiler.compilers.forEach(setupCompiler);
  } else {
    setupCompiler(multiCompiler);
  }
  return (0, import_webpack_dev_middleware.default)(multiCompiler, restOptions);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDevMiddleware
});
