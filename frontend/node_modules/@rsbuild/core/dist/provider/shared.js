"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var shared_exports = {};
__export(shared_exports, {
  BUILTIN_LOADER: () => BUILTIN_LOADER,
  applyDefaultPlugins: () => applyDefaultPlugins,
  getCompiledPath: () => getCompiledPath,
  isSatisfyRspackVersion: () => isSatisfyRspackVersion,
  rspackMinVersion: () => rspackMinVersion
});
module.exports = __toCommonJS(shared_exports);
var import_path = require("path");
var import_shared = require("@rsbuild/shared");
var import_shared2 = require("@rsbuild/shared");
var import_shared3 = require("@rsbuild/shared");
const applyDefaultPlugins = (plugins) => (0, import_shared3.awaitableGetter)([
  Promise.resolve().then(() => __toESM(require("./plugins/transition"))).then((m) => m.pluginTransition()),
  plugins.basic(),
  plugins.entry(),
  // plugins.cache(),
  plugins.target(),
  Promise.resolve().then(() => __toESM(require("./plugins/output"))).then((m) => m.pluginOutput()),
  Promise.resolve().then(() => __toESM(require("./plugins/resolve"))).then((m) => m.pluginResolve()),
  plugins.fileSize(),
  // cleanOutput plugin should before the html plugin
  plugins.cleanOutput(),
  plugins.asset(),
  plugins.html(),
  plugins.wasm(),
  plugins.moment(),
  plugins.nodeAddons(),
  plugins.define(),
  Promise.resolve().then(() => __toESM(require("./plugins/css"))).then((m) => m.pluginCss()),
  Promise.resolve().then(() => __toESM(require("./plugins/less"))).then((m) => m.pluginLess()),
  Promise.resolve().then(() => __toESM(require("./plugins/sass"))).then((m) => m.pluginSass()),
  Promise.resolve().then(() => __toESM(require("./plugins/minimize"))).then((m) => m.pluginMinimize()),
  Promise.resolve().then(() => __toESM(require("./plugins/hmr"))).then((m) => m.pluginHMR()),
  Promise.resolve().then(() => __toESM(require("./plugins/progress"))).then((m) => m.pluginProgress()),
  Promise.resolve().then(() => __toESM(require("./plugins/swc"))).then((m) => m.pluginSwc()),
  plugins.externals(),
  plugins.toml(),
  plugins.yaml(),
  plugins.splitChunks(),
  plugins.startUrl(),
  plugins.inlineChunk(),
  plugins.bundleAnalyzer(),
  plugins.networkPerformance(),
  plugins.preloadOrPrefetch(),
  plugins.performance(),
  plugins.server(),
  Promise.resolve().then(() => __toESM(require("./plugins/rspackProfile"))).then((m) => m.pluginRspackProfile())
]);
const rspackMinVersion = "0.4.0";
const compareSemver = (version1, version2) => {
  const parts1 = version1.split(".").map(Number);
  const parts2 = version2.split(".").map(Number);
  const len = Math.max(parts1.length, parts2.length);
  for (let i = 0; i < len; i++) {
    const item1 = parts1[i] ?? 0;
    const item2 = parts2[i] ?? 0;
    if (item1 > item2) {
      return 1;
    }
    if (item1 < item2) {
      return -1;
    }
  }
  return 0;
};
const isSatisfyRspackVersion = async (version) => {
  if (version.includes("-canary")) {
    version = version.split("-canary")[0];
  }
  if (version && /^[\d\.]+$/.test(version)) {
    return compareSemver(version, rspackMinVersion) >= 0;
  }
  return true;
};
const getCompiledPath = (packageName) => {
  const providerCompilerPath = (0, import_path.join)(__dirname, "../../compiled", packageName);
  if (import_shared2.fse.existsSync(providerCompilerPath)) {
    return providerCompilerPath;
  }
  return (0, import_shared.getSharedPkgCompiledPath)(packageName);
};
const BUILTIN_LOADER = "builtin:";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BUILTIN_LOADER,
  applyDefaultPlugins,
  getCompiledPath,
  isSatisfyRspackVersion,
  rspackMinVersion
});
