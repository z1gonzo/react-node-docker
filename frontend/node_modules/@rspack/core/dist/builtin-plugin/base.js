"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.createBuiltinPlugin = exports.RspackBuiltinPlugin = exports.canInherentFromParent = exports.HOOKS_CAN_NOT_INHERENT_FROM_PARENT = exports.BuiltinPluginName = void 0;
// TODO: workaround for https://github.com/napi-rs/napi-rs/pull/1690
var BuiltinPluginName;
(function (BuiltinPluginName) {
    BuiltinPluginName["DefinePlugin"] = "DefinePlugin";
    BuiltinPluginName["ProvidePlugin"] = "ProvidePlugin";
    BuiltinPluginName["BannerPlugin"] = "BannerPlugin";
    BuiltinPluginName["ProgressPlugin"] = "ProgressPlugin";
    BuiltinPluginName["EntryPlugin"] = "EntryPlugin";
    BuiltinPluginName["ExternalsPlugin"] = "ExternalsPlugin";
    BuiltinPluginName["NodeTargetPlugin"] = "NodeTargetPlugin";
    BuiltinPluginName["ElectronTargetPlugin"] = "ElectronTargetPlugin";
    BuiltinPluginName["EnableChunkLoadingPlugin"] = "EnableChunkLoadingPlugin";
    BuiltinPluginName["EnableLibraryPlugin"] = "EnableLibraryPlugin";
    BuiltinPluginName["EnableWasmLoadingPlugin"] = "EnableWasmLoadingPlugin";
    BuiltinPluginName["ChunkPrefetchPreloadPlugin"] = "ChunkPrefetchPreloadPlugin";
    BuiltinPluginName["CommonJsChunkFormatPlugin"] = "CommonJsChunkFormatPlugin";
    BuiltinPluginName["ArrayPushCallbackChunkFormatPlugin"] = "ArrayPushCallbackChunkFormatPlugin";
    BuiltinPluginName["ModuleChunkFormatPlugin"] = "ModuleChunkFormatPlugin";
    BuiltinPluginName["HotModuleReplacementPlugin"] = "HotModuleReplacementPlugin";
    BuiltinPluginName["HttpExternalsRspackPlugin"] = "HttpExternalsRspackPlugin";
    BuiltinPluginName["CopyRspackPlugin"] = "CopyRspackPlugin";
    BuiltinPluginName["HtmlRspackPlugin"] = "HtmlRspackPlugin";
    BuiltinPluginName["SwcJsMinimizerRspackPlugin"] = "SwcJsMinimizerRspackPlugin";
    BuiltinPluginName["SwcCssMinimizerRspackPlugin"] = "SwcCssMinimizerRspackPlugin";
    BuiltinPluginName["LimitChunkCountPlugin"] = "LimitChunkCountPlugin";
    BuiltinPluginName["WorkerPlugin"] = "WorkerPlugin";
    BuiltinPluginName["WebWorkerTemplatePlugin"] = "WebWorkerTemplatePlugin";
    BuiltinPluginName["MergeDuplicateChunksPlugin"] = "MergeDuplicateChunksPlugin";
    BuiltinPluginName["SplitChunksPlugin"] = "SplitChunksPlugin";
    BuiltinPluginName["OldSplitChunksPlugin"] = "OldSplitChunksPlugin";
    BuiltinPluginName["ShareRuntimePlugin"] = "ShareRuntimePlugin";
    BuiltinPluginName["ContainerPlugin"] = "ContainerPlugin";
    BuiltinPluginName["ContainerReferencePlugin"] = "ContainerReferencePlugin";
    BuiltinPluginName["ProvideSharedPlugin"] = "ProvideSharedPlugin";
    BuiltinPluginName["ConsumeSharedPlugin"] = "ConsumeSharedPlugin";
    BuiltinPluginName["NamedModuleIdsPlugin"] = "NamedModuleIdsPlugin";
    BuiltinPluginName["DeterministicModuleIdsPlugin"] = "DeterministicModuleIdsPlugin";
    BuiltinPluginName["NamedChunkIdsPlugin"] = "NamedChunkIdsPlugin";
    BuiltinPluginName["DeterministicChunkIdsPlugin"] = "DeterministicChunkIdsPlugin";
    BuiltinPluginName["RealContentHashPlugin"] = "RealContentHashPlugin";
    BuiltinPluginName["RemoveEmptyChunksPlugin"] = "RemoveEmptyChunksPlugin";
    BuiltinPluginName["EnsureChunkConditionsPlugin"] = "EnsureChunkConditionsPlugin";
    BuiltinPluginName["WarnCaseSensitiveModulesPlugin"] = "WarnCaseSensitiveModulesPlugin";
    BuiltinPluginName["DataUriPlugin"] = "DataUriPlugin";
    BuiltinPluginName["FileUriPlugin"] = "FileUriPlugin";
    BuiltinPluginName["RuntimePlugin"] = "RuntimePlugin";
    BuiltinPluginName["JsonModulesPlugin"] = "JsonModulesPlugin";
    BuiltinPluginName["InferAsyncModulesPlugin"] = "InferAsyncModulesPlugin";
    BuiltinPluginName["JavascriptModulesPlugin"] = "JavascriptModulesPlugin";
    BuiltinPluginName["AsyncWebAssemblyModulesPlugin"] = "AsyncWebAssemblyModulesPlugin";
    BuiltinPluginName["AssetModulesPlugin"] = "AssetModulesPlugin";
    BuiltinPluginName["SourceMapDevToolPlugin"] = "SourceMapDevToolPlugin";
    BuiltinPluginName["EvalSourceMapDevToolPlugin"] = "EvalSourceMapDevToolPlugin";
    BuiltinPluginName["SideEffectsFlagPlugin"] = "SideEffectsFlagPlugin";
    BuiltinPluginName["FlagDependencyExportsPlugin"] = "FlagDependencyExportsPlugin";
    BuiltinPluginName["FlagDependencyUsagePlugin"] = "FlagDependencyUsagePlugin";
    BuiltinPluginName["MangleExportsPlugin"] = "MangleExportsPlugin";
})(BuiltinPluginName = exports.BuiltinPluginName || (exports.BuiltinPluginName = {}));
exports.HOOKS_CAN_NOT_INHERENT_FROM_PARENT = [
    "make",
    "compile",
    "emit",
    "afterEmit",
    "invalid",
    "done",
    "thisCompilation"
];
function canInherentFromParent(affectedHooks) {
    if (typeof affectedHooks === "undefined") {
        // this arm should be removed
        return false;
    }
    else {
        return !exports.HOOKS_CAN_NOT_INHERENT_FROM_PARENT.includes(affectedHooks);
    }
}
exports.canInherentFromParent = canInherentFromParent;
class RspackBuiltinPlugin {
    apply(compiler) {
        let raw = this.raw(compiler);
        if (raw) {
            raw.canInherentFromParent = canInherentFromParent(this.affectedHooks);
            compiler.__internal__registerBuiltinPlugin(raw);
        }
    }
}
exports.RspackBuiltinPlugin = RspackBuiltinPlugin;
function createBuiltinPlugin(name, options) {
    return {
        name: name,
        options: options !== null && options !== void 0 ? options : false // undefined or null will cause napi error, so false for fallback
    };
}
exports.createBuiltinPlugin = createBuiltinPlugin;
function create(name, resolve, 
// `affectedHooks` is used to inform `createChildCompile` about which builtin plugin can be reversed.
// However, this has a drawback as it doesn't represent the actual condition but merely serves as an indicator.
affectedHooks) {
    class Plugin extends RspackBuiltinPlugin {
        constructor(...args) {
            super();
            this.name = name;
            this.affectedHooks = affectedHooks;
            this._options = resolve(...args);
        }
        raw() {
            return createBuiltinPlugin(name, this._options);
        }
    }
    // Make the plugin class name consistent with webpack
    // https://stackoverflow.com/a/46132163
    Object.defineProperty(Plugin, "name", { value: name });
    return Plugin;
}
exports.create = create;
//# sourceMappingURL=base.js.map