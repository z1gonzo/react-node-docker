import * as binding from "@rspack/binding";
import { Compiler, RspackPluginInstance } from "..";
export declare enum BuiltinPluginName {
    DefinePlugin = "DefinePlugin",
    ProvidePlugin = "ProvidePlugin",
    BannerPlugin = "BannerPlugin",
    ProgressPlugin = "ProgressPlugin",
    EntryPlugin = "EntryPlugin",
    ExternalsPlugin = "ExternalsPlugin",
    NodeTargetPlugin = "NodeTargetPlugin",
    ElectronTargetPlugin = "ElectronTargetPlugin",
    EnableChunkLoadingPlugin = "EnableChunkLoadingPlugin",
    EnableLibraryPlugin = "EnableLibraryPlugin",
    EnableWasmLoadingPlugin = "EnableWasmLoadingPlugin",
    ChunkPrefetchPreloadPlugin = "ChunkPrefetchPreloadPlugin",
    CommonJsChunkFormatPlugin = "CommonJsChunkFormatPlugin",
    ArrayPushCallbackChunkFormatPlugin = "ArrayPushCallbackChunkFormatPlugin",
    ModuleChunkFormatPlugin = "ModuleChunkFormatPlugin",
    HotModuleReplacementPlugin = "HotModuleReplacementPlugin",
    HttpExternalsRspackPlugin = "HttpExternalsRspackPlugin",
    CopyRspackPlugin = "CopyRspackPlugin",
    HtmlRspackPlugin = "HtmlRspackPlugin",
    SwcJsMinimizerRspackPlugin = "SwcJsMinimizerRspackPlugin",
    SwcCssMinimizerRspackPlugin = "SwcCssMinimizerRspackPlugin",
    LimitChunkCountPlugin = "LimitChunkCountPlugin",
    WorkerPlugin = "WorkerPlugin",
    WebWorkerTemplatePlugin = "WebWorkerTemplatePlugin",
    MergeDuplicateChunksPlugin = "MergeDuplicateChunksPlugin",
    SplitChunksPlugin = "SplitChunksPlugin",
    OldSplitChunksPlugin = "OldSplitChunksPlugin",
    ShareRuntimePlugin = "ShareRuntimePlugin",
    ContainerPlugin = "ContainerPlugin",
    ContainerReferencePlugin = "ContainerReferencePlugin",
    ProvideSharedPlugin = "ProvideSharedPlugin",
    ConsumeSharedPlugin = "ConsumeSharedPlugin",
    NamedModuleIdsPlugin = "NamedModuleIdsPlugin",
    DeterministicModuleIdsPlugin = "DeterministicModuleIdsPlugin",
    NamedChunkIdsPlugin = "NamedChunkIdsPlugin",
    DeterministicChunkIdsPlugin = "DeterministicChunkIdsPlugin",
    RealContentHashPlugin = "RealContentHashPlugin",
    RemoveEmptyChunksPlugin = "RemoveEmptyChunksPlugin",
    EnsureChunkConditionsPlugin = "EnsureChunkConditionsPlugin",
    WarnCaseSensitiveModulesPlugin = "WarnCaseSensitiveModulesPlugin",
    DataUriPlugin = "DataUriPlugin",
    FileUriPlugin = "FileUriPlugin",
    RuntimePlugin = "RuntimePlugin",
    JsonModulesPlugin = "JsonModulesPlugin",
    InferAsyncModulesPlugin = "InferAsyncModulesPlugin",
    JavascriptModulesPlugin = "JavascriptModulesPlugin",
    AsyncWebAssemblyModulesPlugin = "AsyncWebAssemblyModulesPlugin",
    AssetModulesPlugin = "AssetModulesPlugin",
    SourceMapDevToolPlugin = "SourceMapDevToolPlugin",
    EvalSourceMapDevToolPlugin = "EvalSourceMapDevToolPlugin",
    SideEffectsFlagPlugin = "SideEffectsFlagPlugin",
    FlagDependencyExportsPlugin = "FlagDependencyExportsPlugin",
    FlagDependencyUsagePlugin = "FlagDependencyUsagePlugin",
    MangleExportsPlugin = "MangleExportsPlugin"
}
type AffectedHooks = keyof Compiler["hooks"];
export declare const HOOKS_CAN_NOT_INHERENT_FROM_PARENT: string[];
export declare function canInherentFromParent(affectedHooks?: AffectedHooks): boolean;
export declare abstract class RspackBuiltinPlugin implements RspackPluginInstance {
    abstract raw(compiler: Compiler): binding.BuiltinPlugin | null;
    abstract name: BuiltinPluginName;
    affectedHooks?: AffectedHooks;
    apply(compiler: Compiler): void;
}
export declare function createBuiltinPlugin<R>(name: BuiltinPluginName, options: R): binding.BuiltinPlugin;
export declare function create<T extends any[], R>(name: BuiltinPluginName, resolve: (...args: T) => R, affectedHooks?: AffectedHooks): {
    new (...args: T): {
        name: BuiltinPluginName;
        _options: R;
        affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
        raw(): binding.BuiltinPlugin;
        apply(compiler: Compiler): void;
    };
};
export {};
//# sourceMappingURL=base.d.ts.map