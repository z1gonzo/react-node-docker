/// <reference types="node" />
declare const rspackVersion: any, webpackVersion: any;
export { webpackVersion as version, rspackVersion };
export { Compiler } from "./Compiler";
export { Compilation } from "./Compilation";
export type { Asset, AssetInfo, Assets, LogEntry, CompilationParams } from "./Compilation";
export { MultiCompiler } from "./MultiCompiler";
export type { MultiCompilerOptions, MultiRspackOptions } from "./MultiCompiler";
import { RspackOptionsApply } from "./rspackOptionsApply";
export { RspackOptionsApply, RspackOptionsApply as WebpackOptionsApply };
export { RuntimeGlobals } from "./RuntimeGlobals";
export { Stats } from "./Stats";
export type { StatsCompilation, StatsAsset, StatsChunk, StatsError, StatsModule, StatsWarnings } from "./Stats";
export type { MultiStats } from "./MultiStats";
export type { ChunkGroup } from "./ChunkGroup";
export type { NormalModuleFactory } from "./NormalModuleFactory";
export { NormalModule } from "./NormalModule";
export { default as ModuleFilenameHelpers } from "./lib/ModuleFilenameHelpers";
export { default as Template } from "./Template";
export declare const WebpackError: ErrorConstructor;
export type { Watching } from "./Watching";
declare const sources: any;
export { sources };
export declare const config: {
    getNormalizedRspackOptions: (config: {
        name?: string | undefined;
        dependencies?: string[] | undefined;
        entry?: string | string[] | Record<string, string | string[] | {
            import: (string | string[]) & (string | string[] | undefined);
            runtime?: string | false | undefined;
            publicPath?: string | undefined;
            baseUri?: string | undefined;
            chunkLoading?: string | false | undefined;
            asyncChunks?: boolean | undefined;
            wasmLoading?: string | false | undefined;
            filename?: string | undefined;
            library?: {
                type: string;
                amdContainer?: string | undefined;
                auxiliaryComment?: string | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    commonjs2?: string | undefined;
                    root?: string | undefined;
                } | undefined;
                export?: string | string[] | undefined;
                name?: string | string[] | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    root?: string | string[] | undefined;
                } | undefined;
                umdNamedDefine?: boolean | undefined;
            } | undefined;
        }> | undefined;
        output?: {
            path?: string | undefined;
            clean?: boolean | undefined;
            publicPath?: string | undefined;
            filename?: string | undefined;
            chunkFilename?: string | undefined;
            crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
            cssFilename?: string | undefined;
            cssChunkFilename?: string | undefined;
            hotUpdateMainFilename?: string | undefined;
            hotUpdateChunkFilename?: string | undefined;
            hotUpdateGlobal?: string | undefined;
            assetModuleFilename?: string | undefined;
            uniqueName?: string | undefined;
            chunkLoadingGlobal?: string | undefined;
            enabledLibraryTypes?: string[] | undefined;
            library?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | {
                type: string;
                amdContainer?: string | undefined;
                auxiliaryComment?: string | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    commonjs2?: string | undefined;
                    root?: string | undefined;
                } | undefined;
                export?: string | string[] | undefined;
                name?: string | string[] | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    root?: string | string[] | undefined;
                } | undefined;
                umdNamedDefine?: boolean | undefined;
            } | undefined;
            libraryExport?: string | string[] | undefined;
            libraryTarget?: string | undefined;
            umdNamedDefine?: boolean | undefined;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            module?: boolean | undefined;
            strictModuleExceptionHandling?: boolean | undefined;
            strictModuleErrorHandling?: boolean | undefined;
            globalObject?: string | undefined;
            importFunctionName?: string | undefined;
            iife?: boolean | undefined;
            wasmLoading?: string | false | undefined;
            enabledWasmLoadingTypes?: string[] | undefined;
            webassemblyModuleFilename?: string | undefined;
            chunkFormat?: string | false | undefined;
            chunkLoading?: string | false | undefined;
            enabledChunkLoadingTypes?: string[] | undefined;
            trustedTypes?: string | true | {
                policyName?: string | undefined;
            } | undefined;
            sourceMapFilename?: string | undefined;
            hashDigest?: string | undefined;
            hashDigestLength?: number | undefined;
            hashFunction?: string | undefined;
            hashSalt?: string | undefined;
            asyncChunks?: boolean | undefined;
            workerChunkLoading?: string | false | undefined;
            workerWasmLoading?: string | false | undefined;
            workerPublicPath?: string | undefined;
            scriptType?: false | "module" | "text/javascript" | undefined;
            devtoolNamespace?: string | undefined;
        } | undefined;
        target?: false | "node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload` | ("node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload`)[] | undefined;
        mode?: "production" | "development" | "none" | undefined;
        experiments?: {
            lazyCompilation?: boolean | undefined;
            incrementalRebuild?: boolean | {
                make?: boolean | undefined;
                emitAsset?: boolean | undefined;
            } | undefined;
            asyncWebAssembly?: boolean | undefined;
            outputModule?: boolean | undefined;
            topLevelAwait?: boolean | undefined;
            newSplitChunks?: boolean | undefined;
            css?: boolean | undefined;
            futureDefaults?: boolean | undefined;
            rspackFuture?: {
                newResolver?: boolean | undefined;
                newTreeshaking?: boolean | undefined;
                disableTransformByDefault?: boolean | undefined;
                disableApplyEntryLazily?: boolean | undefined;
            } | undefined;
        } | undefined;
        externals?: string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>) | (string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>))[] | undefined;
        externalsType?: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined;
        externalsPresets?: {
            node?: boolean | undefined;
            web?: boolean | undefined;
            webAsync?: boolean | undefined;
            electron?: boolean | undefined;
            electronMain?: boolean | undefined;
            electronPreload?: boolean | undefined;
            electronRenderer?: boolean | undefined;
        } | undefined;
        infrastructureLogging?: {
            appendOnly?: boolean | undefined;
            colors?: boolean | undefined;
            console?: Console | undefined;
            debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
            level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
            stream?: NodeJS.WritableStream | undefined;
        } | undefined;
        cache?: boolean | undefined;
        context?: string | undefined;
        devtool?: false | "cheap-source-map" | "cheap-module-source-map" | "source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | "nosources-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "hidden-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | undefined;
        node?: false | {
            __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
            __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
            global?: boolean | "warn" | undefined;
        } | undefined;
        ignoreWarnings?: (RegExp | ((args_0: Error, args_1: import("./Compilation").Compilation, ...args_2: unknown[]) => boolean))[] | undefined;
        watchOptions?: {
            aggregateTimeout?: number | undefined;
            followSymlinks?: boolean | undefined;
            ignored?: string | RegExp | string[] | undefined;
            poll?: number | boolean | undefined;
            stdin?: boolean | undefined;
        } | undefined;
        watch?: boolean | undefined;
        stats?: boolean | "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | {
            all?: boolean | undefined;
            preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
            assets?: boolean | undefined;
            chunks?: boolean | undefined;
            modules?: boolean | undefined;
            entrypoints?: boolean | undefined;
            chunkGroups?: boolean | undefined;
            warnings?: boolean | undefined;
            warningsCount?: boolean | undefined;
            errors?: boolean | undefined;
            errorsCount?: boolean | undefined;
            colors?: boolean | undefined;
            hash?: boolean | undefined;
            version?: boolean | undefined;
            reasons?: boolean | undefined;
            publicPath?: boolean | undefined;
            outputPath?: boolean | undefined;
            chunkModules?: boolean | undefined;
            chunkRelations?: boolean | undefined;
            ids?: boolean | undefined;
            timings?: boolean | undefined;
            builtAt?: boolean | undefined;
            moduleAssets?: boolean | undefined;
            modulesSpace?: number | undefined;
            nestedModules?: boolean | undefined;
            source?: boolean | undefined;
            logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
            loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
            loggingTrace?: boolean | undefined;
            runtimeModules?: boolean | undefined;
            children?: boolean | undefined;
        } | undefined;
        snapshot?: {
            module?: {
                hash?: boolean | undefined;
                timestamp?: boolean | undefined;
            } | undefined;
            resolve?: {
                hash?: boolean | undefined;
                timestamp?: boolean | undefined;
            } | undefined;
        } | undefined;
        optimization?: {
            moduleIds?: "named" | "deterministic" | undefined;
            chunkIds?: "named" | "deterministic" | undefined;
            minimize?: boolean | undefined;
            minimizer?: (false | "" | 0 | "..." | import("./config").RspackPluginInstance | import("./config").RspackPluginFunction | null | undefined)[] | undefined;
            mergeDuplicateChunks?: boolean | undefined;
            splitChunks?: false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: import("./Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                cacheGroups?: Record<string, false | {
                    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                    minChunks?: number | undefined;
                    name?: string | false | ((args_0: import("./Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                    minSize?: number | undefined;
                    maxSize?: number | undefined;
                    maxAsyncSize?: number | undefined;
                    maxInitialSize?: number | undefined;
                    automaticNameDelimiter?: string | undefined;
                    test?: string | RegExp | ((args_0: import("./Module").Module, ...args_1: unknown[]) => unknown) | undefined;
                    priority?: number | undefined;
                    enforce?: boolean | undefined;
                    filename?: string | undefined;
                    reuseExistingChunk?: boolean | undefined;
                    type?: string | RegExp | undefined;
                    idHint?: string | undefined;
                }> | undefined;
                maxAsyncRequests?: number | undefined;
                maxInitialRequests?: number | undefined;
                fallbackCacheGroup?: {
                    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                    minSize?: number | undefined;
                    maxSize?: number | undefined;
                    maxAsyncSize?: number | undefined;
                    maxInitialSize?: number | undefined;
                    automaticNameDelimiter?: string | undefined;
                } | undefined;
                hidePathInfo?: boolean | undefined;
            } | undefined;
            runtimeChunk?: boolean | "multiple" | "single" | {
                name?: string | ((...args: unknown[]) => string | undefined) | undefined;
            } | undefined;
            removeAvailableModules?: boolean | undefined;
            removeEmptyChunks?: boolean | undefined;
            realContentHash?: boolean | undefined;
            sideEffects?: boolean | "flag" | undefined;
            providedExports?: boolean | undefined;
            innerGraph?: boolean | undefined;
            usedExports?: boolean | "global" | undefined;
            mangleExports?: boolean | "size" | "deterministic" | undefined;
            nodeEnv?: string | false | undefined;
        } | undefined;
        resolve?: import("./config").ResolveOptions | undefined;
        resolveLoader?: import("./config").ResolveOptions | undefined;
        plugins?: (false | "" | 0 | import("./config").RspackPluginInstance | import("./config").RspackPluginFunction | null | undefined)[] | undefined;
        devServer?: import("./config").DevServer | undefined;
        builtins?: import("./builtin-plugin").Builtins | undefined;
        module?: {
            defaultRules?: (false | "" | 0 | "..." | import("./config").RuleSetRule | null | undefined)[] | undefined;
            rules?: (false | "" | 0 | "..." | import("./config").RuleSetRule | null | undefined)[] | undefined;
            parser?: {
                asset?: {
                    dataUrlCondition?: {
                        maxSize?: number | undefined;
                    } | undefined;
                } | undefined;
                javascript?: {
                    dynamicImportMode?: "eager" | "lazy" | undefined;
                    dynamicImportPreload?: number | boolean | undefined;
                    dynamicImportPrefetch?: number | boolean | undefined;
                    url?: boolean | "relative" | undefined;
                } | undefined;
            } | Record<string, Record<string, any>> | undefined;
            generator?: Record<string, Record<string, any>> | {
                asset?: {
                    dataUrl?: {
                        encoding?: false | "base64" | undefined;
                        mimetype?: string | undefined;
                    } | undefined;
                    filename?: string | undefined;
                    publicPath?: string | undefined;
                } | undefined;
                "asset/inline"?: {
                    dataUrl?: {
                        encoding?: false | "base64" | undefined;
                        mimetype?: string | undefined;
                    } | undefined;
                } | undefined;
                "asset/resource"?: {
                    filename?: string | undefined;
                    publicPath?: string | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        profile?: boolean | undefined;
        bail?: boolean | undefined;
    }) => import("./config").RspackOptionsNormalized;
    applyRspackOptionsDefaults: (options: import("./config").RspackOptionsNormalized) => void;
    getNormalizedWebpackOptions: (config: {
        name?: string | undefined;
        dependencies?: string[] | undefined;
        entry?: string | string[] | Record<string, string | string[] | {
            import: (string | string[]) & (string | string[] | undefined);
            runtime?: string | false | undefined;
            publicPath?: string | undefined;
            baseUri?: string | undefined;
            chunkLoading?: string | false | undefined;
            asyncChunks?: boolean | undefined;
            wasmLoading?: string | false | undefined;
            filename?: string | undefined;
            library?: {
                type: string;
                amdContainer?: string | undefined;
                auxiliaryComment?: string | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    commonjs2?: string | undefined;
                    root?: string | undefined;
                } | undefined;
                export?: string | string[] | undefined;
                name?: string | string[] | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    root?: string | string[] | undefined;
                } | undefined;
                umdNamedDefine?: boolean | undefined;
            } | undefined;
        }> | undefined;
        output?: {
            path?: string | undefined;
            clean?: boolean | undefined;
            publicPath?: string | undefined;
            filename?: string | undefined;
            chunkFilename?: string | undefined;
            crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
            cssFilename?: string | undefined;
            cssChunkFilename?: string | undefined;
            hotUpdateMainFilename?: string | undefined;
            hotUpdateChunkFilename?: string | undefined;
            hotUpdateGlobal?: string | undefined;
            assetModuleFilename?: string | undefined;
            uniqueName?: string | undefined;
            chunkLoadingGlobal?: string | undefined;
            enabledLibraryTypes?: string[] | undefined;
            library?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | {
                type: string;
                amdContainer?: string | undefined;
                auxiliaryComment?: string | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    commonjs2?: string | undefined;
                    root?: string | undefined;
                } | undefined;
                export?: string | string[] | undefined;
                name?: string | string[] | {
                    amd?: string | undefined;
                    commonjs?: string | undefined;
                    root?: string | string[] | undefined;
                } | undefined;
                umdNamedDefine?: boolean | undefined;
            } | undefined;
            libraryExport?: string | string[] | undefined;
            libraryTarget?: string | undefined;
            umdNamedDefine?: boolean | undefined;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            module?: boolean | undefined;
            strictModuleExceptionHandling?: boolean | undefined;
            strictModuleErrorHandling?: boolean | undefined;
            globalObject?: string | undefined;
            importFunctionName?: string | undefined;
            iife?: boolean | undefined;
            wasmLoading?: string | false | undefined;
            enabledWasmLoadingTypes?: string[] | undefined;
            webassemblyModuleFilename?: string | undefined;
            chunkFormat?: string | false | undefined;
            chunkLoading?: string | false | undefined;
            enabledChunkLoadingTypes?: string[] | undefined;
            trustedTypes?: string | true | {
                policyName?: string | undefined;
            } | undefined;
            sourceMapFilename?: string | undefined;
            hashDigest?: string | undefined;
            hashDigestLength?: number | undefined;
            hashFunction?: string | undefined;
            hashSalt?: string | undefined;
            asyncChunks?: boolean | undefined;
            workerChunkLoading?: string | false | undefined;
            workerWasmLoading?: string | false | undefined;
            workerPublicPath?: string | undefined;
            scriptType?: false | "module" | "text/javascript" | undefined;
            devtoolNamespace?: string | undefined;
        } | undefined;
        target?: false | "node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload` | ("node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload`)[] | undefined;
        mode?: "production" | "development" | "none" | undefined;
        experiments?: {
            lazyCompilation?: boolean | undefined;
            incrementalRebuild?: boolean | {
                make?: boolean | undefined;
                emitAsset?: boolean | undefined;
            } | undefined;
            asyncWebAssembly?: boolean | undefined;
            outputModule?: boolean | undefined;
            topLevelAwait?: boolean | undefined;
            newSplitChunks?: boolean | undefined;
            css?: boolean | undefined;
            futureDefaults?: boolean | undefined;
            rspackFuture?: {
                newResolver?: boolean | undefined;
                newTreeshaking?: boolean | undefined;
                disableTransformByDefault?: boolean | undefined;
                disableApplyEntryLazily?: boolean | undefined;
            } | undefined;
        } | undefined;
        externals?: string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>) | (string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
            context?: string | undefined;
            dependencyType?: string | undefined;
            request?: string | undefined;
        }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>))[] | undefined;
        externalsType?: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined;
        externalsPresets?: {
            node?: boolean | undefined;
            web?: boolean | undefined;
            webAsync?: boolean | undefined;
            electron?: boolean | undefined;
            electronMain?: boolean | undefined;
            electronPreload?: boolean | undefined;
            electronRenderer?: boolean | undefined;
        } | undefined;
        infrastructureLogging?: {
            appendOnly?: boolean | undefined;
            colors?: boolean | undefined;
            console?: Console | undefined;
            debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
            level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
            stream?: NodeJS.WritableStream | undefined;
        } | undefined;
        cache?: boolean | undefined;
        context?: string | undefined;
        devtool?: false | "cheap-source-map" | "cheap-module-source-map" | "source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | "nosources-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "hidden-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | undefined;
        node?: false | {
            __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
            __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
            global?: boolean | "warn" | undefined;
        } | undefined;
        ignoreWarnings?: (RegExp | ((args_0: Error, args_1: import("./Compilation").Compilation, ...args_2: unknown[]) => boolean))[] | undefined;
        watchOptions?: {
            aggregateTimeout?: number | undefined;
            followSymlinks?: boolean | undefined;
            ignored?: string | RegExp | string[] | undefined;
            poll?: number | boolean | undefined;
            stdin?: boolean | undefined;
        } | undefined;
        watch?: boolean | undefined;
        stats?: boolean | "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | {
            all?: boolean | undefined;
            preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
            assets?: boolean | undefined;
            chunks?: boolean | undefined;
            modules?: boolean | undefined;
            entrypoints?: boolean | undefined;
            chunkGroups?: boolean | undefined;
            warnings?: boolean | undefined;
            warningsCount?: boolean | undefined;
            errors?: boolean | undefined;
            errorsCount?: boolean | undefined;
            colors?: boolean | undefined;
            hash?: boolean | undefined;
            version?: boolean | undefined;
            reasons?: boolean | undefined;
            publicPath?: boolean | undefined;
            outputPath?: boolean | undefined;
            chunkModules?: boolean | undefined;
            chunkRelations?: boolean | undefined;
            ids?: boolean | undefined;
            timings?: boolean | undefined;
            builtAt?: boolean | undefined;
            moduleAssets?: boolean | undefined;
            modulesSpace?: number | undefined;
            nestedModules?: boolean | undefined;
            source?: boolean | undefined;
            logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
            loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
            loggingTrace?: boolean | undefined;
            runtimeModules?: boolean | undefined;
            children?: boolean | undefined;
        } | undefined;
        snapshot?: {
            module?: {
                hash?: boolean | undefined;
                timestamp?: boolean | undefined;
            } | undefined;
            resolve?: {
                hash?: boolean | undefined;
                timestamp?: boolean | undefined;
            } | undefined;
        } | undefined;
        optimization?: {
            moduleIds?: "named" | "deterministic" | undefined;
            chunkIds?: "named" | "deterministic" | undefined;
            minimize?: boolean | undefined;
            minimizer?: (false | "" | 0 | "..." | import("./config").RspackPluginInstance | import("./config").RspackPluginFunction | null | undefined)[] | undefined;
            mergeDuplicateChunks?: boolean | undefined;
            splitChunks?: false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: import("./Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                cacheGroups?: Record<string, false | {
                    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                    minChunks?: number | undefined;
                    name?: string | false | ((args_0: import("./Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                    minSize?: number | undefined;
                    maxSize?: number | undefined;
                    maxAsyncSize?: number | undefined;
                    maxInitialSize?: number | undefined;
                    automaticNameDelimiter?: string | undefined;
                    test?: string | RegExp | ((args_0: import("./Module").Module, ...args_1: unknown[]) => unknown) | undefined;
                    priority?: number | undefined;
                    enforce?: boolean | undefined;
                    filename?: string | undefined;
                    reuseExistingChunk?: boolean | undefined;
                    type?: string | RegExp | undefined;
                    idHint?: string | undefined;
                }> | undefined;
                maxAsyncRequests?: number | undefined;
                maxInitialRequests?: number | undefined;
                fallbackCacheGroup?: {
                    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: import("./Chunk").Chunk, ...args_1: unknown[]) => boolean) | undefined;
                    minSize?: number | undefined;
                    maxSize?: number | undefined;
                    maxAsyncSize?: number | undefined;
                    maxInitialSize?: number | undefined;
                    automaticNameDelimiter?: string | undefined;
                } | undefined;
                hidePathInfo?: boolean | undefined;
            } | undefined;
            runtimeChunk?: boolean | "multiple" | "single" | {
                name?: string | ((...args: unknown[]) => string | undefined) | undefined;
            } | undefined;
            removeAvailableModules?: boolean | undefined;
            removeEmptyChunks?: boolean | undefined;
            realContentHash?: boolean | undefined;
            sideEffects?: boolean | "flag" | undefined;
            providedExports?: boolean | undefined;
            innerGraph?: boolean | undefined;
            usedExports?: boolean | "global" | undefined;
            mangleExports?: boolean | "size" | "deterministic" | undefined;
            nodeEnv?: string | false | undefined;
        } | undefined;
        resolve?: import("./config").ResolveOptions | undefined;
        resolveLoader?: import("./config").ResolveOptions | undefined;
        plugins?: (false | "" | 0 | import("./config").RspackPluginInstance | import("./config").RspackPluginFunction | null | undefined)[] | undefined;
        devServer?: import("./config").DevServer | undefined;
        builtins?: import("./builtin-plugin").Builtins | undefined;
        module?: {
            defaultRules?: (false | "" | 0 | "..." | import("./config").RuleSetRule | null | undefined)[] | undefined;
            rules?: (false | "" | 0 | "..." | import("./config").RuleSetRule | null | undefined)[] | undefined;
            parser?: {
                asset?: {
                    dataUrlCondition?: {
                        maxSize?: number | undefined;
                    } | undefined;
                } | undefined;
                javascript?: {
                    dynamicImportMode?: "eager" | "lazy" | undefined;
                    dynamicImportPreload?: number | boolean | undefined;
                    dynamicImportPrefetch?: number | boolean | undefined;
                    url?: boolean | "relative" | undefined;
                } | undefined;
            } | Record<string, Record<string, any>> | undefined;
            generator?: Record<string, Record<string, any>> | {
                asset?: {
                    dataUrl?: {
                        encoding?: false | "base64" | undefined;
                        mimetype?: string | undefined;
                    } | undefined;
                    filename?: string | undefined;
                    publicPath?: string | undefined;
                } | undefined;
                "asset/inline"?: {
                    dataUrl?: {
                        encoding?: false | "base64" | undefined;
                        mimetype?: string | undefined;
                    } | undefined;
                } | undefined;
                "asset/resource"?: {
                    filename?: string | undefined;
                    publicPath?: string | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        profile?: boolean | undefined;
        bail?: boolean | undefined;
    }) => import("./config").RspackOptionsNormalized;
    applyWebpackOptionsDefaults: (options: import("./config").RspackOptionsNormalized) => void;
};
export type * from "./config";
export declare const util: {
    createHash: (algorithm: any) => any;
    cleverMerge: <T, O>(first: T, second: O) => T | O | (T & O);
};
export { registerGlobalTrace as experimental_registerGlobalTrace, cleanupGlobalTrace as experimental_cleanupGlobalTrace } from "@rspack/binding";
export { BannerPlugin } from "./builtin-plugin";
export type { BannerPluginArgument } from "./builtin-plugin";
export { ProvidePlugin } from "./builtin-plugin";
export type { ProvidePluginOptions } from "./builtin-plugin";
export { DefinePlugin } from "./builtin-plugin";
export type { DefinePluginOptions } from "./builtin-plugin";
export { ProgressPlugin } from "./builtin-plugin";
export type { ProgressPluginArgument } from "./builtin-plugin";
export { EntryPlugin } from "./builtin-plugin";
export type { EntryOptions } from "./builtin-plugin";
export { ExternalsPlugin } from "./builtin-plugin";
export { HotModuleReplacementPlugin } from "./builtin-plugin";
export { LoaderOptionsPlugin } from "./lib/LoaderOptionsPlugin";
export { LoaderTargetPlugin } from "./lib/LoaderTargetPlugin";
export { EnvironmentPlugin } from "./lib/EnvironmentPlugin";
import NodeTemplatePlugin from "./node/NodeTemplatePlugin";
export declare const node: {
    NodeTargetPlugin: {
        new (): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: undefined;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
    NodeTemplatePlugin: typeof NodeTemplatePlugin;
};
export declare const electron: {
    ElectronTargetPlugin: {
        new (context?: string | undefined): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: string;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
export declare const library: {
    EnableLibraryPlugin: {
        new (type: any): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: any;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
export declare const wasm: {
    EnableWasmLoadingPlugin: {
        new (type: any): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: any;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
export declare const javascript: {
    EnableChunkLoadingPlugin: {
        new (type: any): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: any;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
export declare const webworker: {
    WebWorkerTemplatePlugin: {
        new (): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: undefined;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
export declare const optimize: {
    LimitChunkCountPlugin: {
        new (options: import("./builtin-plugin").LimitChunkCountOptions): {
            name: import("./builtin-plugin/base").BuiltinPluginName;
            _options: import("@rspack/binding").RawLimitChunkCountPluginOptions;
            affectedHooks: "emit" | "done" | "compilation" | "make" | "compile" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishModules" | "finishMake" | "entryOption" | undefined;
            raw(): import("@rspack/binding").BuiltinPlugin;
            apply(compiler: import("./Compiler").Compiler): void;
        };
    };
};
import { ModuleFederationPlugin } from "./container/ModuleFederationPlugin";
export type { ModuleFederationPluginOptions } from "./container/ModuleFederationPlugin";
import { ModuleFederationPluginV1 } from "./container/ModuleFederationPluginV1";
export type { ModuleFederationPluginV1Options } from "./container/ModuleFederationPluginV1";
import { ContainerPlugin } from "./container/ContainerPlugin";
import { ContainerReferencePlugin } from "./container/ContainerReferencePlugin";
export type { ContainerPluginOptions, Exposes, ExposesItem, ExposesItems, ExposesObject, ExposesConfig } from "./container/ContainerPlugin";
export type { ContainerReferencePluginOptions, Remotes, RemotesItem, RemotesItems, RemotesObject, RemotesConfig } from "./container/ContainerReferencePlugin";
export declare const container: {
    ContainerPlugin: typeof ContainerPlugin;
    ContainerReferencePlugin: typeof ContainerReferencePlugin;
    ModuleFederationPlugin: typeof ModuleFederationPlugin;
    ModuleFederationPluginV1: typeof ModuleFederationPluginV1;
};
import { ProvideSharedPlugin } from "./sharing/ProvideSharedPlugin";
import { ConsumeSharedPlugin } from "./sharing/ConsumeSharedPlugin";
import { SharePlugin } from "./sharing/SharePlugin";
export type { ProvideSharedPluginOptions, Provides, ProvidesConfig, ProvidesItem, ProvidesObject } from "./sharing/ProvideSharedPlugin";
export type { ConsumeSharedPluginOptions, Consumes, ConsumesConfig, ConsumesItem, ConsumesObject } from "./sharing/ConsumeSharedPlugin";
export type { SharePluginOptions, Shared, SharedConfig, SharedItem, SharedObject } from "./sharing/SharePlugin";
export declare const sharing: {
    ProvideSharedPlugin: typeof ProvideSharedPlugin;
    ConsumeSharedPlugin: typeof ConsumeSharedPlugin;
    SharePlugin: typeof SharePlugin;
};
export { HtmlRspackPlugin } from "./builtin-plugin";
export type { HtmlRspackPluginOptions } from "./builtin-plugin";
export { SwcJsMinimizerRspackPlugin } from "./builtin-plugin";
export type { SwcJsMinimizerRspackPluginOptions } from "./builtin-plugin";
export { SwcCssMinimizerRspackPlugin } from "./builtin-plugin";
export { CopyRspackPlugin } from "./builtin-plugin";
export type { CopyRspackPluginOptions } from "./builtin-plugin";
//# sourceMappingURL=exports.d.ts.map