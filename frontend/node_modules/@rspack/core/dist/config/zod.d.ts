/// <reference types="node" />
import { RawFuncUseCtx } from "@rspack/binding";
import { z } from "zod";
import { Compilation, Compiler } from "..";
import type * as oldBuiltins from "../builtin-plugin";
import type * as webpackDevServer from "webpack-dev-server";
import { Module } from "../Module";
import { Chunk } from "../Chunk";
declare const name: z.ZodString;
export type Name = z.infer<typeof name>;
declare const dependencies: z.ZodArray<z.ZodString, "many">;
export type Dependencies = z.infer<typeof dependencies>;
declare const context: z.ZodString;
export type Context = z.infer<typeof context>;
declare const mode: z.ZodEnum<["development", "production", "none"]>;
export type Mode = z.infer<typeof mode>;
declare const falsy: z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>;
export type Falsy = z.infer<typeof falsy>;
declare const rawPublicPath: z.ZodString;
export type RawPublicPath = z.infer<typeof rawPublicPath>;
declare const publicPath: z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>;
export type PublicPath = z.infer<typeof publicPath>;
declare const baseUri: z.ZodString;
export type BaseUri = z.infer<typeof baseUri>;
declare const chunkLoadingType: z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>;
export type ChunkLoadingType = z.infer<typeof chunkLoadingType>;
declare const chunkLoading: z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>;
export type ChunkLoading = z.infer<typeof chunkLoading>;
declare const asyncChunks: z.ZodBoolean;
export type AsyncChunks = z.infer<typeof asyncChunks>;
declare const wasmLoadingType: z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>;
export type WasmLoadingType = z.infer<typeof wasmLoadingType>;
declare const wasmLoading: z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>;
export type WasmLoading = z.infer<typeof wasmLoading>;
declare const scriptType: z.ZodUnion<[z.ZodEnum<["text/javascript", "module"]>, z.ZodLiteral<false>]>;
export type ScriptType = z.infer<typeof scriptType>;
declare const libraryCustomUmdObject: z.ZodObject<{
    amd: z.ZodOptional<z.ZodString>;
    commonjs: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strict", z.ZodTypeAny, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}>;
export type LibraryCustomUmdObject = z.infer<typeof libraryCustomUmdObject>;
declare const libraryName: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
    amd: z.ZodOptional<z.ZodString>;
    commonjs: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strict", z.ZodTypeAny, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}>]>;
export type LibraryName = z.infer<typeof libraryName>;
declare const libraryCustomUmdCommentObject: z.ZodObject<{
    amd: z.ZodOptional<z.ZodString>;
    commonjs: z.ZodOptional<z.ZodString>;
    commonjs2: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    commonjs2?: string | undefined;
    root?: string | undefined;
}, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    commonjs2?: string | undefined;
    root?: string | undefined;
}>;
export type LibraryCustomUmdCommentObject = z.infer<typeof libraryCustomUmdCommentObject>;
declare const amdContainer: z.ZodString;
export type AmdContainer = z.infer<typeof amdContainer>;
declare const auxiliaryComment: z.ZodUnion<[z.ZodString, z.ZodObject<{
    amd: z.ZodOptional<z.ZodString>;
    commonjs: z.ZodOptional<z.ZodString>;
    commonjs2: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    commonjs2?: string | undefined;
    root?: string | undefined;
}, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    commonjs2?: string | undefined;
    root?: string | undefined;
}>]>;
export type AuxiliaryComment = z.infer<typeof auxiliaryComment>;
declare const libraryExport: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
export type LibraryExport = z.infer<typeof libraryExport>;
declare const libraryType: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
export type LibraryType = z.infer<typeof libraryType>;
declare const umdNamedDefine: z.ZodBoolean;
export type UmdNamedDefine = z.infer<typeof umdNamedDefine>;
declare const libraryOptions: z.ZodObject<{
    amdContainer: z.ZodOptional<z.ZodString>;
    auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        commonjs2: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }>]>>;
    export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }>]>>;
    type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
    umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    type: string;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    export?: string | string[] | undefined;
    name?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | undefined;
    umdNamedDefine?: boolean | undefined;
}, {
    type: string;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    export?: string | string[] | undefined;
    name?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | undefined;
    umdNamedDefine?: boolean | undefined;
}>;
export type LibraryOptions = z.infer<typeof libraryOptions>;
declare const library: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
    amd: z.ZodOptional<z.ZodString>;
    commonjs: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strict", z.ZodTypeAny, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}, {
    amd?: string | undefined;
    commonjs?: string | undefined;
    root?: string | string[] | undefined;
}>]>, z.ZodObject<{
    amdContainer: z.ZodOptional<z.ZodString>;
    auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        commonjs2: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }>]>>;
    export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }>]>>;
    type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
    umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    type: string;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    export?: string | string[] | undefined;
    name?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | undefined;
    umdNamedDefine?: boolean | undefined;
}, {
    type: string;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    export?: string | string[] | undefined;
    name?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | undefined;
    umdNamedDefine?: boolean | undefined;
}>]>>;
export type Library = z.infer<typeof library>;
declare const filenameTemplate: z.ZodString;
export type FilenameTemplate = z.infer<typeof filenameTemplate>;
declare const filename: z.ZodString;
export type Filename = z.infer<typeof filename>;
declare const entryFilename: z.ZodString;
export type EntryFilename = z.infer<typeof entryFilename>;
declare const entryRuntime: z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>;
export type EntryRuntime = z.infer<typeof entryRuntime>;
declare const entryItem: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
export type EntryItem = z.infer<typeof entryItem>;
declare const entryDescription: z.ZodObject<{
    import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    baseUri: z.ZodOptional<z.ZodString>;
    chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    asyncChunks: z.ZodOptional<z.ZodBoolean>;
    wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    filename: z.ZodOptional<z.ZodString>;
    library: z.ZodOptional<z.ZodObject<{
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>>;
        type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}>;
export type EntryDescription = z.infer<typeof entryDescription>;
declare const entryUnnamed: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
export type EntryUnnamed = z.infer<typeof entryUnnamed>;
declare const entryObject: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
    import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    baseUri: z.ZodOptional<z.ZodString>;
    chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    asyncChunks: z.ZodOptional<z.ZodBoolean>;
    wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    filename: z.ZodOptional<z.ZodString>;
    library: z.ZodOptional<z.ZodObject<{
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>>;
        type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}>]>>;
export type EntryObject = z.infer<typeof entryObject>;
declare const entryStatic: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
    import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    baseUri: z.ZodOptional<z.ZodString>;
    chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    asyncChunks: z.ZodOptional<z.ZodBoolean>;
    wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    filename: z.ZodOptional<z.ZodString>;
    library: z.ZodOptional<z.ZodObject<{
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>>;
        type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}>]>>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>]>;
export type EntryStatic = z.infer<typeof entryStatic>;
declare const entry: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
    import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    baseUri: z.ZodOptional<z.ZodString>;
    chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    asyncChunks: z.ZodOptional<z.ZodBoolean>;
    wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    filename: z.ZodOptional<z.ZodString>;
    library: z.ZodOptional<z.ZodObject<{
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>>;
        type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}, {
    import: (string | string[]) & (string | string[] | undefined);
    runtime?: string | false | undefined;
    publicPath?: string | undefined;
    baseUri?: string | undefined;
    chunkLoading?: string | false | undefined;
    asyncChunks?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    filename?: string | undefined;
    library?: {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
}>]>>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>]>;
export type Entry = z.infer<typeof entry>;
declare const path: z.ZodString;
export type Path = z.infer<typeof path>;
declare const assetModuleFilename: z.ZodString;
export type AssetModuleFilename = z.infer<typeof assetModuleFilename>;
declare const webassemblyModuleFilename: z.ZodString;
export type WebassemblyModuleFilename = z.infer<typeof webassemblyModuleFilename>;
declare const chunkFilename: z.ZodString;
export type ChunkFilename = z.infer<typeof chunkFilename>;
declare const crossOriginLoading: z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<["anonymous", "use-credentials"]>]>;
export type CrossOriginLoading = z.infer<typeof crossOriginLoading>;
declare const cssFilename: z.ZodString;
export type CssFilename = z.infer<typeof cssFilename>;
declare const cssChunkFilename: z.ZodString;
export type CssChunkFilename = z.infer<typeof cssChunkFilename>;
declare const hotUpdateChunkFilename: z.ZodString;
export type HotUpdateChunkFilename = z.infer<typeof hotUpdateChunkFilename>;
declare const hotUpdateMainFilename: z.ZodString;
export type HotUpdateMainFilename = z.infer<typeof hotUpdateMainFilename>;
declare const hotUpdateGlobal: z.ZodString;
export type HotUpdateGlobal = z.infer<typeof hotUpdateGlobal>;
declare const uniqueName: z.ZodString;
export type UniqueName = z.infer<typeof uniqueName>;
declare const chunkLoadingGlobal: z.ZodString;
export type ChunkLoadingGlobal = z.infer<typeof chunkLoadingGlobal>;
declare const enabledLibraryTypes: z.ZodArray<z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>, "many">;
export type EnabledLibraryTypes = z.infer<typeof enabledLibraryTypes>;
declare const clean: z.ZodBoolean;
export type Clean = z.infer<typeof clean>;
declare const outputModule: z.ZodBoolean;
export type OutputModule = z.infer<typeof outputModule>;
declare const strictModuleExceptionHandling: z.ZodBoolean;
export type StrictModuleExceptionHandling = z.infer<typeof strictModuleExceptionHandling>;
declare const strictModuleErrorHandling: z.ZodBoolean;
export type StrictModuleErrorHandling = z.infer<typeof strictModuleErrorHandling>;
declare const globalObject: z.ZodString;
export type GlobalObject = z.infer<typeof globalObject>;
declare const enabledWasmLoadingTypes: z.ZodArray<z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>, "many">;
export type EnabledWasmLoadingTypes = z.infer<typeof enabledWasmLoadingTypes>;
declare const importFunctionName: z.ZodString;
export type ImportFunctionName = z.infer<typeof importFunctionName>;
declare const iife: z.ZodBoolean;
export type Iife = z.infer<typeof iife>;
declare const enabledChunkLoadingTypes: z.ZodArray<z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>, "many">;
export type EnabledChunkLoadingTypes = z.infer<typeof enabledChunkLoadingTypes>;
declare const chunkFormat: z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>;
export type ChunkFormat = z.infer<typeof chunkFormat>;
declare const workerPublicPath: z.ZodString;
export type WorkerPublicPath = z.infer<typeof workerPublicPath>;
declare const trustedTypes: z.ZodObject<{
    policyName: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    policyName?: string | undefined;
}, {
    policyName?: string | undefined;
}>;
export type TrustedTypes = z.infer<typeof trustedTypes>;
declare const hashDigest: z.ZodString;
export type HashDigest = z.infer<typeof hashDigest>;
declare const hashDigestLength: z.ZodNumber;
export type HashDigestLength = z.infer<typeof hashDigestLength>;
declare const hashFunction: z.ZodString;
export type HashFunction = z.infer<typeof hashFunction>;
declare const hashSalt: z.ZodString;
export type HashSalt = z.infer<typeof hashSalt>;
declare const sourceMapFilename: z.ZodString;
export type SourceMapFilename = z.infer<typeof sourceMapFilename>;
declare const devtoolNamespace: z.ZodString;
export type DevtoolNamespace = z.infer<typeof devtoolNamespace>;
declare const output: z.ZodObject<{
    path: z.ZodOptional<z.ZodString>;
    clean: z.ZodOptional<z.ZodBoolean>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    filename: z.ZodOptional<z.ZodString>;
    chunkFilename: z.ZodOptional<z.ZodString>;
    crossOriginLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<["anonymous", "use-credentials"]>]>>;
    cssFilename: z.ZodOptional<z.ZodString>;
    cssChunkFilename: z.ZodOptional<z.ZodString>;
    hotUpdateMainFilename: z.ZodOptional<z.ZodString>;
    hotUpdateChunkFilename: z.ZodOptional<z.ZodString>;
    hotUpdateGlobal: z.ZodOptional<z.ZodString>;
    assetModuleFilename: z.ZodOptional<z.ZodString>;
    uniqueName: z.ZodOptional<z.ZodString>;
    chunkLoadingGlobal: z.ZodOptional<z.ZodString>;
    enabledLibraryTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>, "many">>;
    library: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    }>]>, z.ZodObject<{
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>>;
        type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }, {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    }>]>>>;
    libraryExport: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    libraryTarget: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>>;
    umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
    amdContainer: z.ZodOptional<z.ZodString>;
    auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        amd: z.ZodOptional<z.ZodString>;
        commonjs: z.ZodOptional<z.ZodString>;
        commonjs2: z.ZodOptional<z.ZodString>;
        root: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }, {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    }>]>>;
    module: z.ZodOptional<z.ZodBoolean>;
    strictModuleExceptionHandling: z.ZodOptional<z.ZodBoolean>;
    strictModuleErrorHandling: z.ZodOptional<z.ZodBoolean>;
    globalObject: z.ZodOptional<z.ZodString>;
    importFunctionName: z.ZodOptional<z.ZodString>;
    iife: z.ZodOptional<z.ZodBoolean>;
    wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    enabledWasmLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>, "many">>;
    webassemblyModuleFilename: z.ZodOptional<z.ZodString>;
    chunkFormat: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
    chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    enabledChunkLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>, "many">>;
    trustedTypes: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<true>, z.ZodString]>, z.ZodObject<{
        policyName: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        policyName?: string | undefined;
    }, {
        policyName?: string | undefined;
    }>]>>;
    sourceMapFilename: z.ZodOptional<z.ZodString>;
    hashDigest: z.ZodOptional<z.ZodString>;
    hashDigestLength: z.ZodOptional<z.ZodNumber>;
    hashFunction: z.ZodOptional<z.ZodString>;
    hashSalt: z.ZodOptional<z.ZodString>;
    asyncChunks: z.ZodOptional<z.ZodBoolean>;
    workerChunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
    workerWasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
    workerPublicPath: z.ZodOptional<z.ZodString>;
    scriptType: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["text/javascript", "module"]>, z.ZodLiteral<false>]>>;
    devtoolNamespace: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    path?: string | undefined;
    clean?: boolean | undefined;
    publicPath?: string | undefined;
    filename?: string | undefined;
    chunkFilename?: string | undefined;
    crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
    cssFilename?: string | undefined;
    cssChunkFilename?: string | undefined;
    hotUpdateMainFilename?: string | undefined;
    hotUpdateChunkFilename?: string | undefined;
    hotUpdateGlobal?: string | undefined;
    assetModuleFilename?: string | undefined;
    uniqueName?: string | undefined;
    chunkLoadingGlobal?: string | undefined;
    enabledLibraryTypes?: string[] | undefined;
    library?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
    libraryExport?: string | string[] | undefined;
    libraryTarget?: string | undefined;
    umdNamedDefine?: boolean | undefined;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    module?: boolean | undefined;
    strictModuleExceptionHandling?: boolean | undefined;
    strictModuleErrorHandling?: boolean | undefined;
    globalObject?: string | undefined;
    importFunctionName?: string | undefined;
    iife?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    enabledWasmLoadingTypes?: string[] | undefined;
    webassemblyModuleFilename?: string | undefined;
    chunkFormat?: string | false | undefined;
    chunkLoading?: string | false | undefined;
    enabledChunkLoadingTypes?: string[] | undefined;
    trustedTypes?: string | true | {
        policyName?: string | undefined;
    } | undefined;
    sourceMapFilename?: string | undefined;
    hashDigest?: string | undefined;
    hashDigestLength?: number | undefined;
    hashFunction?: string | undefined;
    hashSalt?: string | undefined;
    asyncChunks?: boolean | undefined;
    workerChunkLoading?: string | false | undefined;
    workerWasmLoading?: string | false | undefined;
    workerPublicPath?: string | undefined;
    scriptType?: false | "module" | "text/javascript" | undefined;
    devtoolNamespace?: string | undefined;
}, {
    path?: string | undefined;
    clean?: boolean | undefined;
    publicPath?: string | undefined;
    filename?: string | undefined;
    chunkFilename?: string | undefined;
    crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
    cssFilename?: string | undefined;
    cssChunkFilename?: string | undefined;
    hotUpdateMainFilename?: string | undefined;
    hotUpdateChunkFilename?: string | undefined;
    hotUpdateGlobal?: string | undefined;
    assetModuleFilename?: string | undefined;
    uniqueName?: string | undefined;
    chunkLoadingGlobal?: string | undefined;
    enabledLibraryTypes?: string[] | undefined;
    library?: string | string[] | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        root?: string | string[] | undefined;
    } | {
        type: string;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        export?: string | string[] | undefined;
        name?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | undefined;
        umdNamedDefine?: boolean | undefined;
    } | undefined;
    libraryExport?: string | string[] | undefined;
    libraryTarget?: string | undefined;
    umdNamedDefine?: boolean | undefined;
    amdContainer?: string | undefined;
    auxiliaryComment?: string | {
        amd?: string | undefined;
        commonjs?: string | undefined;
        commonjs2?: string | undefined;
        root?: string | undefined;
    } | undefined;
    module?: boolean | undefined;
    strictModuleExceptionHandling?: boolean | undefined;
    strictModuleErrorHandling?: boolean | undefined;
    globalObject?: string | undefined;
    importFunctionName?: string | undefined;
    iife?: boolean | undefined;
    wasmLoading?: string | false | undefined;
    enabledWasmLoadingTypes?: string[] | undefined;
    webassemblyModuleFilename?: string | undefined;
    chunkFormat?: string | false | undefined;
    chunkLoading?: string | false | undefined;
    enabledChunkLoadingTypes?: string[] | undefined;
    trustedTypes?: string | true | {
        policyName?: string | undefined;
    } | undefined;
    sourceMapFilename?: string | undefined;
    hashDigest?: string | undefined;
    hashDigestLength?: number | undefined;
    hashFunction?: string | undefined;
    hashSalt?: string | undefined;
    asyncChunks?: boolean | undefined;
    workerChunkLoading?: string | false | undefined;
    workerWasmLoading?: string | false | undefined;
    workerPublicPath?: string | undefined;
    scriptType?: false | "module" | "text/javascript" | undefined;
    devtoolNamespace?: string | undefined;
}>;
export type Output = z.infer<typeof output>;
declare const resolveAlias: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, "many">]>>;
export type ResolveAlias = z.infer<typeof resolveAlias>;
declare const resolveTsconfig: z.ZodObject<{
    configFile: z.ZodString;
    references: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodLiteral<"auto">]>>;
}, "strict", z.ZodTypeAny, {
    configFile: string;
    references?: string[] | "auto" | undefined;
}, {
    configFile: string;
    references?: string[] | "auto" | undefined;
}>;
export type ResolveTsconfig = z.infer<typeof resolveTsconfig>;
declare const baseResolveOptions: z.ZodObject<{
    alias: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, "many">]>>>;
    /**
     * This is `aliasField: ["browser"]` in webpack, because no one
     * uses aliasField other than "browser". ---@bvanjoi
     */
    browserField: z.ZodOptional<z.ZodBoolean>;
    conditionNames: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    extensions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    fallback: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, "many">]>>>;
    mainFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    mainFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    modules: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    preferRelative: z.ZodOptional<z.ZodBoolean>;
    symlinks: z.ZodOptional<z.ZodBoolean>;
    tsConfigPath: z.ZodOptional<z.ZodString>;
    tsConfig: z.ZodOptional<z.ZodObject<{
        configFile: z.ZodString;
        references: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodLiteral<"auto">]>>;
    }, "strict", z.ZodTypeAny, {
        configFile: string;
        references?: string[] | "auto" | undefined;
    }, {
        configFile: string;
        references?: string[] | "auto" | undefined;
    }>>;
    fullySpecified: z.ZodOptional<z.ZodBoolean>;
    exportsFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    extensionAlias: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
}, "strict", z.ZodTypeAny, {
    alias?: Record<string, string | false | (string | false)[]> | undefined;
    browserField?: boolean | undefined;
    conditionNames?: string[] | undefined;
    extensions?: string[] | undefined;
    fallback?: Record<string, string | false | (string | false)[]> | undefined;
    mainFields?: string[] | undefined;
    mainFiles?: string[] | undefined;
    modules?: string[] | undefined;
    preferRelative?: boolean | undefined;
    symlinks?: boolean | undefined;
    tsConfigPath?: string | undefined;
    tsConfig?: {
        configFile: string;
        references?: string[] | "auto" | undefined;
    } | undefined;
    fullySpecified?: boolean | undefined;
    exportsFields?: string[] | undefined;
    extensionAlias?: Record<string, string | string[]> | undefined;
}, {
    alias?: Record<string, string | false | (string | false)[]> | undefined;
    browserField?: boolean | undefined;
    conditionNames?: string[] | undefined;
    extensions?: string[] | undefined;
    fallback?: Record<string, string | false | (string | false)[]> | undefined;
    mainFields?: string[] | undefined;
    mainFiles?: string[] | undefined;
    modules?: string[] | undefined;
    preferRelative?: boolean | undefined;
    symlinks?: boolean | undefined;
    tsConfigPath?: string | undefined;
    tsConfig?: {
        configFile: string;
        references?: string[] | "auto" | undefined;
    } | undefined;
    fullySpecified?: boolean | undefined;
    exportsFields?: string[] | undefined;
    extensionAlias?: Record<string, string | string[]> | undefined;
}>;
export type ResolveOptions = z.infer<typeof baseResolveOptions> & {
    byDependency?: Record<string, ResolveOptions>;
};
declare const resolve: z.ZodType<ResolveOptions, z.ZodTypeDef, ResolveOptions>;
export type Resolve = z.infer<typeof resolve>;
declare const baseRuleSetCondition: z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>;
export type RuleSetCondition = z.infer<typeof baseRuleSetCondition> | RuleSetConditions | RuleSetLogicalConditions;
export type RuleSetConditions = RuleSetCondition[];
export type RuleSetLogicalConditions = {
    and?: RuleSetConditions;
    or?: RuleSetConditions;
    not?: RuleSetCondition;
};
declare const ruleSetLoader: z.ZodString;
export type RuleSetLoader = z.infer<typeof ruleSetLoader>;
declare const ruleSetLoaderOptions: z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>;
export type RuleSetLoaderOptions = z.infer<typeof ruleSetLoaderOptions>;
declare const ruleSetLoaderWithOptions: z.ZodObject<{
    ident: z.ZodOptional<z.ZodString>;
    loader: z.ZodString;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
}, "strict", z.ZodTypeAny, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}>;
export type RuleSetLoaderWithOptions = z.infer<typeof ruleSetLoaderWithOptions>;
declare const ruleSetUseItem: z.ZodUnion<[z.ZodString, z.ZodObject<{
    ident: z.ZodOptional<z.ZodString>;
    loader: z.ZodString;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
}, "strict", z.ZodTypeAny, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}>]>;
export type RuleSetUseItem = z.infer<typeof ruleSetUseItem>;
declare const ruleSetUse: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
    ident: z.ZodOptional<z.ZodString>;
    loader: z.ZodString;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
}, "strict", z.ZodTypeAny, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
    ident: z.ZodOptional<z.ZodString>;
    loader: z.ZodString;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
}, "strict", z.ZodTypeAny, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}>]>, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<RawFuncUseCtx, z.ZodTypeDef, RawFuncUseCtx>], z.ZodUnknown>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
    ident: z.ZodOptional<z.ZodString>;
    loader: z.ZodString;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
}, "strict", z.ZodTypeAny, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}, {
    loader: string;
    ident?: string | undefined;
    options?: string | Record<string, any> | undefined;
}>]>, "many">>]>;
export type RuleSetUse = z.infer<typeof ruleSetUse>;
declare const baseRuleSetRule: z.ZodObject<{
    test: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    exclude: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    include: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    issuer: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    dependency: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    resource: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    resourceFragment: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    resourceQuery: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    scheme: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    mimetype: z.ZodOptional<z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>;
    descriptionData: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<RuleSetCondition, z.ZodTypeDef, RuleSetCondition>>>;
    type: z.ZodOptional<z.ZodString>;
    loader: z.ZodOptional<z.ZodString>;
    options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
    use: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
        ident: z.ZodOptional<z.ZodString>;
        loader: z.ZodString;
        options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
    }, "strict", z.ZodTypeAny, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
        ident: z.ZodOptional<z.ZodString>;
        loader: z.ZodString;
        options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
    }, "strict", z.ZodTypeAny, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }>]>, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<RawFuncUseCtx, z.ZodTypeDef, RawFuncUseCtx>], z.ZodUnknown>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
        ident: z.ZodOptional<z.ZodString>;
        loader: z.ZodString;
        options: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
    }, "strict", z.ZodTypeAny, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }, {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    }>]>, "many">>]>>;
    parser: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    generator: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    resolve: z.ZodOptional<z.ZodType<ResolveOptions, z.ZodTypeDef, ResolveOptions>>;
    sideEffects: z.ZodOptional<z.ZodBoolean>;
    enforce: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"pre">, z.ZodLiteral<"post">]>>;
}, "strict", z.ZodTypeAny, {
    test?: RuleSetCondition | undefined;
    exclude?: RuleSetCondition | undefined;
    include?: RuleSetCondition | undefined;
    issuer?: RuleSetCondition | undefined;
    dependency?: RuleSetCondition | undefined;
    resource?: RuleSetCondition | undefined;
    resourceFragment?: RuleSetCondition | undefined;
    resourceQuery?: RuleSetCondition | undefined;
    scheme?: RuleSetCondition | undefined;
    mimetype?: RuleSetCondition | undefined;
    descriptionData?: Record<string, RuleSetCondition> | undefined;
    type?: string | undefined;
    loader?: string | undefined;
    options?: string | Record<string, any> | undefined;
    use?: string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    } | (string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    })[] | ((args_0: RawFuncUseCtx, ...args_1: unknown[]) => (string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    })[]) | undefined;
    parser?: Record<string, any> | undefined;
    generator?: Record<string, any> | undefined;
    resolve?: ResolveOptions | undefined;
    sideEffects?: boolean | undefined;
    enforce?: "pre" | "post" | undefined;
}, {
    test?: RuleSetCondition | undefined;
    exclude?: RuleSetCondition | undefined;
    include?: RuleSetCondition | undefined;
    issuer?: RuleSetCondition | undefined;
    dependency?: RuleSetCondition | undefined;
    resource?: RuleSetCondition | undefined;
    resourceFragment?: RuleSetCondition | undefined;
    resourceQuery?: RuleSetCondition | undefined;
    scheme?: RuleSetCondition | undefined;
    mimetype?: RuleSetCondition | undefined;
    descriptionData?: Record<string, RuleSetCondition> | undefined;
    type?: string | undefined;
    loader?: string | undefined;
    options?: string | Record<string, any> | undefined;
    use?: string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    } | (string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    })[] | ((args_0: RawFuncUseCtx, ...args_1: unknown[]) => (string | {
        loader: string;
        ident?: string | undefined;
        options?: string | Record<string, any> | undefined;
    })[]) | undefined;
    parser?: Record<string, any> | undefined;
    generator?: Record<string, any> | undefined;
    resolve?: ResolveOptions | undefined;
    sideEffects?: boolean | undefined;
    enforce?: "pre" | "post" | undefined;
}>;
export type RuleSetRule = z.infer<typeof baseRuleSetRule> & {
    oneOf?: RuleSetRule[];
    rules?: RuleSetRule[];
};
declare const ruleSetRules: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<RuleSetRule, z.ZodTypeDef, RuleSetRule>]>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">;
export type RuleSetRules = z.infer<typeof ruleSetRules>;
declare const assetParserDataUrlOptions: z.ZodObject<{
    maxSize: z.ZodOptional<z.ZodNumber>;
}, "strict", z.ZodTypeAny, {
    maxSize?: number | undefined;
}, {
    maxSize?: number | undefined;
}>;
export type AssetParserDataUrlOptions = z.infer<typeof assetParserDataUrlOptions>;
declare const assetParserDataUrl: z.ZodObject<{
    maxSize: z.ZodOptional<z.ZodNumber>;
}, "strict", z.ZodTypeAny, {
    maxSize?: number | undefined;
}, {
    maxSize?: number | undefined;
}>;
export type AssetParserDataUrl = z.infer<typeof assetParserDataUrl>;
declare const assetParserOptions: z.ZodObject<{
    dataUrlCondition: z.ZodOptional<z.ZodObject<{
        maxSize: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        maxSize?: number | undefined;
    }, {
        maxSize?: number | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    dataUrlCondition?: {
        maxSize?: number | undefined;
    } | undefined;
}, {
    dataUrlCondition?: {
        maxSize?: number | undefined;
    } | undefined;
}>;
export type AssetParserOptions = z.infer<typeof assetParserOptions>;
declare const javascriptParserOptions: z.ZodObject<{
    dynamicImportMode: z.ZodOptional<z.ZodEnum<["eager", "lazy"]>>;
    dynamicImportPreload: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
    dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
    url: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"relative">, z.ZodBoolean]>>;
}, "strict", z.ZodTypeAny, {
    dynamicImportMode?: "eager" | "lazy" | undefined;
    dynamicImportPreload?: number | boolean | undefined;
    dynamicImportPrefetch?: number | boolean | undefined;
    url?: boolean | "relative" | undefined;
}, {
    dynamicImportMode?: "eager" | "lazy" | undefined;
    dynamicImportPreload?: number | boolean | undefined;
    dynamicImportPrefetch?: number | boolean | undefined;
    url?: boolean | "relative" | undefined;
}>;
export type JavascriptParserOptions = z.infer<typeof javascriptParserOptions>;
declare const parserOptionsByModuleTypeKnown: z.ZodObject<{
    asset: z.ZodOptional<z.ZodObject<{
        dataUrlCondition: z.ZodOptional<z.ZodObject<{
            maxSize: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            maxSize?: number | undefined;
        }, {
            maxSize?: number | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    }, {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    }>>;
    javascript: z.ZodOptional<z.ZodObject<{
        dynamicImportMode: z.ZodOptional<z.ZodEnum<["eager", "lazy"]>>;
        dynamicImportPreload: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
        dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
        url: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"relative">, z.ZodBoolean]>>;
    }, "strict", z.ZodTypeAny, {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    }, {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    asset?: {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    } | undefined;
    javascript?: {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    } | undefined;
}, {
    asset?: {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    } | undefined;
    javascript?: {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    } | undefined;
}>;
export type ParserOptionsByModuleTypeKnown = z.infer<typeof parserOptionsByModuleTypeKnown>;
declare const parserOptionsByModuleTypeUnknown: z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>;
export type ParserOptionsByModuleTypeUnknown = z.infer<typeof parserOptionsByModuleTypeUnknown>;
declare const parserOptionsByModuleType: z.ZodUnion<[z.ZodObject<{
    asset: z.ZodOptional<z.ZodObject<{
        dataUrlCondition: z.ZodOptional<z.ZodObject<{
            maxSize: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            maxSize?: number | undefined;
        }, {
            maxSize?: number | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    }, {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    }>>;
    javascript: z.ZodOptional<z.ZodObject<{
        dynamicImportMode: z.ZodOptional<z.ZodEnum<["eager", "lazy"]>>;
        dynamicImportPreload: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
        dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
        url: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"relative">, z.ZodBoolean]>>;
    }, "strict", z.ZodTypeAny, {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    }, {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    asset?: {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    } | undefined;
    javascript?: {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    } | undefined;
}, {
    asset?: {
        dataUrlCondition?: {
            maxSize?: number | undefined;
        } | undefined;
    } | undefined;
    javascript?: {
        dynamicImportMode?: "eager" | "lazy" | undefined;
        dynamicImportPreload?: number | boolean | undefined;
        dynamicImportPrefetch?: number | boolean | undefined;
        url?: boolean | "relative" | undefined;
    } | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>;
export type ParserOptionsByModuleType = z.infer<typeof parserOptionsByModuleType>;
declare const assetGeneratorDataUrlOptions: z.ZodObject<{
    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
    mimetype: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    encoding?: false | "base64" | undefined;
    mimetype?: string | undefined;
}, {
    encoding?: false | "base64" | undefined;
    mimetype?: string | undefined;
}>;
export type AssetGeneratorDataUrlOptions = z.infer<typeof assetGeneratorDataUrlOptions>;
declare const assetGeneratorDataUrl: z.ZodObject<{
    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
    mimetype: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    encoding?: false | "base64" | undefined;
    mimetype?: string | undefined;
}, {
    encoding?: false | "base64" | undefined;
    mimetype?: string | undefined;
}>;
export type AssetGeneratorDataUrl = z.infer<typeof assetGeneratorDataUrl>;
declare const assetInlineGeneratorOptions: z.ZodObject<{
    dataUrl: z.ZodOptional<z.ZodObject<{
        encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
        mimetype: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    }, {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    dataUrl?: {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    } | undefined;
}, {
    dataUrl?: {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    } | undefined;
}>;
export type AssetInlineGeneratorOptions = z.infer<typeof assetInlineGeneratorOptions>;
declare const assetResourceGeneratorOptions: z.ZodObject<{
    filename: z.ZodOptional<z.ZodString>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    filename?: string | undefined;
    publicPath?: string | undefined;
}, {
    filename?: string | undefined;
    publicPath?: string | undefined;
}>;
export type AssetResourceGeneratorOptions = z.infer<typeof assetResourceGeneratorOptions>;
declare const assetGeneratorOptions: z.ZodObject<{
    dataUrl: z.ZodOptional<z.ZodObject<{
        encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
        mimetype: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    }, {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    }>>;
    filename: z.ZodOptional<z.ZodString>;
    publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    dataUrl?: {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    } | undefined;
    filename?: string | undefined;
    publicPath?: string | undefined;
}, {
    dataUrl?: {
        encoding?: false | "base64" | undefined;
        mimetype?: string | undefined;
    } | undefined;
    filename?: string | undefined;
    publicPath?: string | undefined;
}>;
export type AssetGeneratorOptions = z.infer<typeof assetGeneratorOptions>;
declare const generatorOptionsByModuleTypeKnown: z.ZodObject<{
    asset: z.ZodOptional<z.ZodObject<{
        dataUrl: z.ZodOptional<z.ZodObject<{
            encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
            mimetype: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }>>;
        filename: z.ZodOptional<z.ZodString>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    }, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    }>>;
    "asset/inline": z.ZodOptional<z.ZodObject<{
        dataUrl: z.ZodOptional<z.ZodObject<{
            encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
            mimetype: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    }, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    }>>;
    "asset/resource": z.ZodOptional<z.ZodObject<{
        filename: z.ZodOptional<z.ZodString>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        filename?: string | undefined;
        publicPath?: string | undefined;
    }, {
        filename?: string | undefined;
        publicPath?: string | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    asset?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
    "asset/inline"?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    } | undefined;
    "asset/resource"?: {
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
}, {
    asset?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
    "asset/inline"?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    } | undefined;
    "asset/resource"?: {
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
}>;
export type GeneratorOptionsByModuleTypeKnown = z.infer<typeof generatorOptionsByModuleTypeKnown>;
declare const generatorOptionsByModuleTypeUnknown: z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>;
export type GeneratorOptionsByModuleTypeUnknown = z.infer<typeof generatorOptionsByModuleTypeUnknown>;
declare const generatorOptionsByModuleType: z.ZodUnion<[z.ZodObject<{
    asset: z.ZodOptional<z.ZodObject<{
        dataUrl: z.ZodOptional<z.ZodObject<{
            encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
            mimetype: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }>>;
        filename: z.ZodOptional<z.ZodString>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    }, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    }>>;
    "asset/inline": z.ZodOptional<z.ZodObject<{
        dataUrl: z.ZodOptional<z.ZodObject<{
            encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
            mimetype: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }, {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    }, {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    }>>;
    "asset/resource": z.ZodOptional<z.ZodObject<{
        filename: z.ZodOptional<z.ZodString>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        filename?: string | undefined;
        publicPath?: string | undefined;
    }, {
        filename?: string | undefined;
        publicPath?: string | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    asset?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
    "asset/inline"?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    } | undefined;
    "asset/resource"?: {
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
}, {
    asset?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
    "asset/inline"?: {
        dataUrl?: {
            encoding?: false | "base64" | undefined;
            mimetype?: string | undefined;
        } | undefined;
    } | undefined;
    "asset/resource"?: {
        filename?: string | undefined;
        publicPath?: string | undefined;
    } | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>;
export type GeneratorOptionsByModuleType = z.infer<typeof generatorOptionsByModuleType>;
declare const moduleOptions: z.ZodObject<{
    defaultRules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<RuleSetRule, z.ZodTypeDef, RuleSetRule>]>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">>;
    rules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<RuleSetRule, z.ZodTypeDef, RuleSetRule>]>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">>;
    parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        asset: z.ZodOptional<z.ZodObject<{
            dataUrlCondition: z.ZodOptional<z.ZodObject<{
                maxSize: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                maxSize?: number | undefined;
            }, {
                maxSize?: number | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        }, {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        }>>;
        javascript: z.ZodOptional<z.ZodObject<{
            dynamicImportMode: z.ZodOptional<z.ZodEnum<["eager", "lazy"]>>;
            dynamicImportPreload: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
            dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
            url: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"relative">, z.ZodBoolean]>>;
        }, "strict", z.ZodTypeAny, {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        }, {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        asset?: {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        } | undefined;
        javascript?: {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        } | undefined;
    }, {
        asset?: {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        } | undefined;
        javascript?: {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        } | undefined;
    }>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>>;
    generator: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        asset: z.ZodOptional<z.ZodObject<{
            dataUrl: z.ZodOptional<z.ZodObject<{
                encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                mimetype: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            }, {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            }>>;
            filename: z.ZodOptional<z.ZodString>;
            publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
        }, "strict", z.ZodTypeAny, {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        }, {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        }>>;
        "asset/inline": z.ZodOptional<z.ZodObject<{
            dataUrl: z.ZodOptional<z.ZodObject<{
                encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                mimetype: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            }, {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        }, {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        }>>;
        "asset/resource": z.ZodOptional<z.ZodObject<{
            filename: z.ZodOptional<z.ZodString>;
            publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
        }, "strict", z.ZodTypeAny, {
            filename?: string | undefined;
            publicPath?: string | undefined;
        }, {
            filename?: string | undefined;
            publicPath?: string | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        asset?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
        "asset/inline"?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        } | undefined;
        "asset/resource"?: {
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
    }, {
        asset?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
        "asset/inline"?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        } | undefined;
        "asset/resource"?: {
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
    }>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>>;
}, "strict", z.ZodTypeAny, {
    defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
    rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
    parser?: {
        asset?: {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        } | undefined;
        javascript?: {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        } | undefined;
    } | Record<string, Record<string, any>> | undefined;
    generator?: Record<string, Record<string, any>> | {
        asset?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
        "asset/inline"?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        } | undefined;
        "asset/resource"?: {
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
    rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
    parser?: {
        asset?: {
            dataUrlCondition?: {
                maxSize?: number | undefined;
            } | undefined;
        } | undefined;
        javascript?: {
            dynamicImportMode?: "eager" | "lazy" | undefined;
            dynamicImportPreload?: number | boolean | undefined;
            dynamicImportPrefetch?: number | boolean | undefined;
            url?: boolean | "relative" | undefined;
        } | undefined;
    } | Record<string, Record<string, any>> | undefined;
    generator?: Record<string, Record<string, any>> | {
        asset?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
        "asset/inline"?: {
            dataUrl?: {
                encoding?: false | "base64" | undefined;
                mimetype?: string | undefined;
            } | undefined;
        } | undefined;
        "asset/resource"?: {
            filename?: string | undefined;
            publicPath?: string | undefined;
        } | undefined;
    } | undefined;
}>;
export type ModuleOptions = z.infer<typeof moduleOptions>;
declare const target: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["web", "webworker", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "browserslist"]>, z.ZodLiteral<"node">]>, z.ZodLiteral<"async-node">]>, z.ZodType<`node${number}`, z.ZodTypeDef, `node${number}`>]>, z.ZodType<`async-node${number}`, z.ZodTypeDef, `async-node${number}`>]>, z.ZodType<`node${number}.${number}`, z.ZodTypeDef, `node${number}.${number}`>]>, z.ZodType<`async-node${number}.${number}`, z.ZodTypeDef, `async-node${number}.${number}`>]>, z.ZodLiteral<"electron-main">]>, z.ZodType<`electron${number}-main`, z.ZodTypeDef, `electron${number}-main`>]>, z.ZodType<`electron${number}.${number}-main`, z.ZodTypeDef, `electron${number}.${number}-main`>]>, z.ZodLiteral<"electron-renderer">]>, z.ZodType<`electron${number}-renderer`, z.ZodTypeDef, `electron${number}-renderer`>]>, z.ZodType<`electron${number}.${number}-renderer`, z.ZodTypeDef, `electron${number}.${number}-renderer`>]>, z.ZodLiteral<"electron-preload">]>, z.ZodType<`electron${number}-preload`, z.ZodTypeDef, `electron${number}-preload`>]>, z.ZodType<`electron${number}.${number}-preload`, z.ZodTypeDef, `electron${number}.${number}-preload`>]>]>, z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["web", "webworker", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "browserslist"]>, z.ZodLiteral<"node">]>, z.ZodLiteral<"async-node">]>, z.ZodType<`node${number}`, z.ZodTypeDef, `node${number}`>]>, z.ZodType<`async-node${number}`, z.ZodTypeDef, `async-node${number}`>]>, z.ZodType<`node${number}.${number}`, z.ZodTypeDef, `node${number}.${number}`>]>, z.ZodType<`async-node${number}.${number}`, z.ZodTypeDef, `async-node${number}.${number}`>]>, z.ZodLiteral<"electron-main">]>, z.ZodType<`electron${number}-main`, z.ZodTypeDef, `electron${number}-main`>]>, z.ZodType<`electron${number}.${number}-main`, z.ZodTypeDef, `electron${number}.${number}-main`>]>, z.ZodLiteral<"electron-renderer">]>, z.ZodType<`electron${number}-renderer`, z.ZodTypeDef, `electron${number}-renderer`>]>, z.ZodType<`electron${number}.${number}-renderer`, z.ZodTypeDef, `electron${number}.${number}-renderer`>]>, z.ZodLiteral<"electron-preload">]>, z.ZodType<`electron${number}-preload`, z.ZodTypeDef, `electron${number}-preload`>]>, z.ZodType<`electron${number}.${number}-preload`, z.ZodTypeDef, `electron${number}.${number}-preload`>]>, "many">]>;
export type Target = z.infer<typeof target>;
export declare const externalsType: z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>;
export type ExternalsType = z.infer<typeof externalsType>;
declare const externalItemValue: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>;
export type ExternalItemValue = z.infer<typeof externalItemValue>;
declare const externalItemObjectUnknown: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>;
export type ExternalItemObjectUnknown = z.infer<typeof externalItemObjectUnknown>;
declare const externalItemFunctionData: z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>;
export type ExternalItemFunctionData = z.infer<typeof externalItemFunctionData>;
declare const externalItem: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Error, z.ZodTypeDef, Error>>, z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>, z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>], z.ZodUnknown>, z.ZodVoid>], z.ZodUnknown>, z.ZodUnknown>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>>]>;
export type ExternalItem = z.infer<typeof externalItem>;
declare const externals: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Error, z.ZodTypeDef, Error>>, z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>, z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>], z.ZodUnknown>, z.ZodVoid>], z.ZodUnknown>, z.ZodUnknown>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Error, z.ZodTypeDef, Error>>, z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>, z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>], z.ZodUnknown>, z.ZodVoid>], z.ZodUnknown>, z.ZodUnknown>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    context: z.ZodOptional<z.ZodString>;
    dependencyType: z.ZodOptional<z.ZodString>;
    request: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}, {
    context?: string | undefined;
    dependencyType?: string | undefined;
    request?: string | undefined;
}>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>>]>]>;
export type Externals = z.infer<typeof externals>;
declare const externalsPresets: z.ZodObject<{
    node: z.ZodOptional<z.ZodBoolean>;
    web: z.ZodOptional<z.ZodBoolean>;
    webAsync: z.ZodOptional<z.ZodBoolean>;
    electron: z.ZodOptional<z.ZodBoolean>;
    electronMain: z.ZodOptional<z.ZodBoolean>;
    electronPreload: z.ZodOptional<z.ZodBoolean>;
    electronRenderer: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    node?: boolean | undefined;
    web?: boolean | undefined;
    webAsync?: boolean | undefined;
    electron?: boolean | undefined;
    electronMain?: boolean | undefined;
    electronPreload?: boolean | undefined;
    electronRenderer?: boolean | undefined;
}, {
    node?: boolean | undefined;
    web?: boolean | undefined;
    webAsync?: boolean | undefined;
    electron?: boolean | undefined;
    electronMain?: boolean | undefined;
    electronPreload?: boolean | undefined;
    electronRenderer?: boolean | undefined;
}>;
export type ExternalsPresets = z.infer<typeof externalsPresets>;
declare const filterItemTypes: z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>;
export type FilterItemTypes = z.infer<typeof filterItemTypes>;
declare const filterTypes: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>;
export type FilterTypes = z.infer<typeof filterTypes>;
declare const infrastructureLogging: z.ZodObject<{
    appendOnly: z.ZodOptional<z.ZodBoolean>;
    colors: z.ZodOptional<z.ZodBoolean>;
    console: z.ZodOptional<z.ZodType<Console, z.ZodTypeDef, Console>>;
    debug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>]>>;
    level: z.ZodOptional<z.ZodEnum<["none", "error", "warn", "info", "log", "verbose"]>>;
    stream: z.ZodOptional<z.ZodType<NodeJS.WritableStream, z.ZodTypeDef, NodeJS.WritableStream>>;
}, "strict", z.ZodTypeAny, {
    appendOnly?: boolean | undefined;
    colors?: boolean | undefined;
    console?: Console | undefined;
    debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    stream?: NodeJS.WritableStream | undefined;
}, {
    appendOnly?: boolean | undefined;
    colors?: boolean | undefined;
    console?: Console | undefined;
    debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    stream?: NodeJS.WritableStream | undefined;
}>;
export type InfrastructureLogging = z.infer<typeof infrastructureLogging>;
declare const devTool: z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<["cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]>]>;
export type DevTool = z.infer<typeof devTool>;
declare const nodeOptions: z.ZodObject<{
    __dirname: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
    __filename: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
    global: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"warn">]>>;
}, "strict", z.ZodTypeAny, {
    __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    global?: boolean | "warn" | undefined;
}, {
    __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    global?: boolean | "warn" | undefined;
}>;
export type NodeOptions = z.infer<typeof nodeOptions>;
declare const node: z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
    __dirname: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
    __filename: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
    global: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"warn">]>>;
}, "strict", z.ZodTypeAny, {
    __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    global?: boolean | "warn" | undefined;
}, {
    __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
    global?: boolean | "warn" | undefined;
}>]>;
export type Node = z.infer<typeof node>;
declare const snapshotOptions: z.ZodObject<{
    module: z.ZodOptional<z.ZodObject<{
        hash: z.ZodOptional<z.ZodBoolean>;
        timestamp: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    }, {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    }>>;
    resolve: z.ZodOptional<z.ZodObject<{
        hash: z.ZodOptional<z.ZodBoolean>;
        timestamp: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    }, {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    module?: {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    } | undefined;
    resolve?: {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    } | undefined;
}, {
    module?: {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    } | undefined;
    resolve?: {
        hash?: boolean | undefined;
        timestamp?: boolean | undefined;
    } | undefined;
}>;
export type SnapshotOptions = z.infer<typeof snapshotOptions>;
declare const cacheOptions: z.ZodBoolean;
export type CacheOptions = z.infer<typeof cacheOptions>;
declare const statsOptions: z.ZodObject<{
    all: z.ZodOptional<z.ZodBoolean>;
    preset: z.ZodOptional<z.ZodEnum<["normal", "none", "verbose", "errors-only", "errors-warnings"]>>;
    assets: z.ZodOptional<z.ZodBoolean>;
    chunks: z.ZodOptional<z.ZodBoolean>;
    modules: z.ZodOptional<z.ZodBoolean>;
    entrypoints: z.ZodOptional<z.ZodBoolean>;
    chunkGroups: z.ZodOptional<z.ZodBoolean>;
    warnings: z.ZodOptional<z.ZodBoolean>;
    warningsCount: z.ZodOptional<z.ZodBoolean>;
    errors: z.ZodOptional<z.ZodBoolean>;
    errorsCount: z.ZodOptional<z.ZodBoolean>;
    colors: z.ZodOptional<z.ZodBoolean>;
    hash: z.ZodOptional<z.ZodBoolean>;
    version: z.ZodOptional<z.ZodBoolean>;
    reasons: z.ZodOptional<z.ZodBoolean>;
    publicPath: z.ZodOptional<z.ZodBoolean>;
    outputPath: z.ZodOptional<z.ZodBoolean>;
    chunkModules: z.ZodOptional<z.ZodBoolean>;
    chunkRelations: z.ZodOptional<z.ZodBoolean>;
    ids: z.ZodOptional<z.ZodBoolean>;
    timings: z.ZodOptional<z.ZodBoolean>;
    builtAt: z.ZodOptional<z.ZodBoolean>;
    moduleAssets: z.ZodOptional<z.ZodBoolean>;
    modulesSpace: z.ZodOptional<z.ZodNumber>;
    nestedModules: z.ZodOptional<z.ZodBoolean>;
    source: z.ZodOptional<z.ZodBoolean>;
    logging: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["none", "error", "warn", "info", "log", "verbose"]>, z.ZodBoolean]>>;
    loggingDebug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>]>>;
    loggingTrace: z.ZodOptional<z.ZodBoolean>;
    runtimeModules: z.ZodOptional<z.ZodBoolean>;
    children: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    all?: boolean | undefined;
    preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
    assets?: boolean | undefined;
    chunks?: boolean | undefined;
    modules?: boolean | undefined;
    entrypoints?: boolean | undefined;
    chunkGroups?: boolean | undefined;
    warnings?: boolean | undefined;
    warningsCount?: boolean | undefined;
    errors?: boolean | undefined;
    errorsCount?: boolean | undefined;
    colors?: boolean | undefined;
    hash?: boolean | undefined;
    version?: boolean | undefined;
    reasons?: boolean | undefined;
    publicPath?: boolean | undefined;
    outputPath?: boolean | undefined;
    chunkModules?: boolean | undefined;
    chunkRelations?: boolean | undefined;
    ids?: boolean | undefined;
    timings?: boolean | undefined;
    builtAt?: boolean | undefined;
    moduleAssets?: boolean | undefined;
    modulesSpace?: number | undefined;
    nestedModules?: boolean | undefined;
    source?: boolean | undefined;
    logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    loggingTrace?: boolean | undefined;
    runtimeModules?: boolean | undefined;
    children?: boolean | undefined;
}, {
    all?: boolean | undefined;
    preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
    assets?: boolean | undefined;
    chunks?: boolean | undefined;
    modules?: boolean | undefined;
    entrypoints?: boolean | undefined;
    chunkGroups?: boolean | undefined;
    warnings?: boolean | undefined;
    warningsCount?: boolean | undefined;
    errors?: boolean | undefined;
    errorsCount?: boolean | undefined;
    colors?: boolean | undefined;
    hash?: boolean | undefined;
    version?: boolean | undefined;
    reasons?: boolean | undefined;
    publicPath?: boolean | undefined;
    outputPath?: boolean | undefined;
    chunkModules?: boolean | undefined;
    chunkRelations?: boolean | undefined;
    ids?: boolean | undefined;
    timings?: boolean | undefined;
    builtAt?: boolean | undefined;
    moduleAssets?: boolean | undefined;
    modulesSpace?: number | undefined;
    nestedModules?: boolean | undefined;
    source?: boolean | undefined;
    logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    loggingTrace?: boolean | undefined;
    runtimeModules?: boolean | undefined;
    children?: boolean | undefined;
}>;
export type StatsOptions = z.infer<typeof statsOptions>;
declare const statsValue: z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["none", "errors-only", "errors-warnings", "normal", "verbose"]>, z.ZodBoolean]>, z.ZodObject<{
    all: z.ZodOptional<z.ZodBoolean>;
    preset: z.ZodOptional<z.ZodEnum<["normal", "none", "verbose", "errors-only", "errors-warnings"]>>;
    assets: z.ZodOptional<z.ZodBoolean>;
    chunks: z.ZodOptional<z.ZodBoolean>;
    modules: z.ZodOptional<z.ZodBoolean>;
    entrypoints: z.ZodOptional<z.ZodBoolean>;
    chunkGroups: z.ZodOptional<z.ZodBoolean>;
    warnings: z.ZodOptional<z.ZodBoolean>;
    warningsCount: z.ZodOptional<z.ZodBoolean>;
    errors: z.ZodOptional<z.ZodBoolean>;
    errorsCount: z.ZodOptional<z.ZodBoolean>;
    colors: z.ZodOptional<z.ZodBoolean>;
    hash: z.ZodOptional<z.ZodBoolean>;
    version: z.ZodOptional<z.ZodBoolean>;
    reasons: z.ZodOptional<z.ZodBoolean>;
    publicPath: z.ZodOptional<z.ZodBoolean>;
    outputPath: z.ZodOptional<z.ZodBoolean>;
    chunkModules: z.ZodOptional<z.ZodBoolean>;
    chunkRelations: z.ZodOptional<z.ZodBoolean>;
    ids: z.ZodOptional<z.ZodBoolean>;
    timings: z.ZodOptional<z.ZodBoolean>;
    builtAt: z.ZodOptional<z.ZodBoolean>;
    moduleAssets: z.ZodOptional<z.ZodBoolean>;
    modulesSpace: z.ZodOptional<z.ZodNumber>;
    nestedModules: z.ZodOptional<z.ZodBoolean>;
    source: z.ZodOptional<z.ZodBoolean>;
    logging: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["none", "error", "warn", "info", "log", "verbose"]>, z.ZodBoolean]>>;
    loggingDebug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>]>>;
    loggingTrace: z.ZodOptional<z.ZodBoolean>;
    runtimeModules: z.ZodOptional<z.ZodBoolean>;
    children: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    all?: boolean | undefined;
    preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
    assets?: boolean | undefined;
    chunks?: boolean | undefined;
    modules?: boolean | undefined;
    entrypoints?: boolean | undefined;
    chunkGroups?: boolean | undefined;
    warnings?: boolean | undefined;
    warningsCount?: boolean | undefined;
    errors?: boolean | undefined;
    errorsCount?: boolean | undefined;
    colors?: boolean | undefined;
    hash?: boolean | undefined;
    version?: boolean | undefined;
    reasons?: boolean | undefined;
    publicPath?: boolean | undefined;
    outputPath?: boolean | undefined;
    chunkModules?: boolean | undefined;
    chunkRelations?: boolean | undefined;
    ids?: boolean | undefined;
    timings?: boolean | undefined;
    builtAt?: boolean | undefined;
    moduleAssets?: boolean | undefined;
    modulesSpace?: number | undefined;
    nestedModules?: boolean | undefined;
    source?: boolean | undefined;
    logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    loggingTrace?: boolean | undefined;
    runtimeModules?: boolean | undefined;
    children?: boolean | undefined;
}, {
    all?: boolean | undefined;
    preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
    assets?: boolean | undefined;
    chunks?: boolean | undefined;
    modules?: boolean | undefined;
    entrypoints?: boolean | undefined;
    chunkGroups?: boolean | undefined;
    warnings?: boolean | undefined;
    warningsCount?: boolean | undefined;
    errors?: boolean | undefined;
    errorsCount?: boolean | undefined;
    colors?: boolean | undefined;
    hash?: boolean | undefined;
    version?: boolean | undefined;
    reasons?: boolean | undefined;
    publicPath?: boolean | undefined;
    outputPath?: boolean | undefined;
    chunkModules?: boolean | undefined;
    chunkRelations?: boolean | undefined;
    ids?: boolean | undefined;
    timings?: boolean | undefined;
    builtAt?: boolean | undefined;
    moduleAssets?: boolean | undefined;
    modulesSpace?: number | undefined;
    nestedModules?: boolean | undefined;
    source?: boolean | undefined;
    logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
    loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
    loggingTrace?: boolean | undefined;
    runtimeModules?: boolean | undefined;
    children?: boolean | undefined;
}>]>;
export type StatsValue = z.infer<typeof statsValue>;
export interface RspackPluginInstance {
    apply: (compiler: Compiler) => void;
    [k: string]: any;
}
export type RspackPluginFunction = (this: Compiler, compiler: Compiler) => void;
declare const plugins: z.ZodArray<z.ZodUnion<[z.ZodType<RspackPluginInstance, z.ZodTypeDef, RspackPluginInstance>, z.ZodType<RspackPluginFunction, z.ZodTypeDef, RspackPluginFunction>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">;
export type Plugins = z.infer<typeof plugins>;
declare const optimizationRuntimeChunk: z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["single", "multiple"]>, z.ZodBoolean]>, z.ZodObject<{
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodString, z.ZodUndefined]>>]>>;
}, "strict", z.ZodTypeAny, {
    name?: string | ((...args: unknown[]) => string | undefined) | undefined;
}, {
    name?: string | ((...args: unknown[]) => string | undefined) | undefined;
}>]>;
export type OptimizationRuntimeChunk = z.infer<typeof optimizationRuntimeChunk>;
declare const optimizationSplitChunksNameFunction: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>;
export type OptimizationSplitChunksNameFunction = z.infer<typeof optimizationSplitChunksNameFunction>;
declare const optimizationSplitChunksCacheGroup: z.ZodObject<{
    chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
    minChunks: z.ZodOptional<z.ZodNumber>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
    minSize: z.ZodOptional<z.ZodNumber>;
    maxSize: z.ZodOptional<z.ZodNumber>;
    maxAsyncSize: z.ZodOptional<z.ZodNumber>;
    maxInitialSize: z.ZodOptional<z.ZodNumber>;
    automaticNameDelimiter: z.ZodOptional<z.ZodString>;
    test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Module, z.ZodTypeDef, Module>], z.ZodUnknown>, z.ZodUnknown>]>>;
    priority: z.ZodOptional<z.ZodNumber>;
    enforce: z.ZodOptional<z.ZodBoolean>;
    filename: z.ZodOptional<z.ZodString>;
    reuseExistingChunk: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>>;
    idHint: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
    minChunks?: number | undefined;
    name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
    minSize?: number | undefined;
    maxSize?: number | undefined;
    maxAsyncSize?: number | undefined;
    maxInitialSize?: number | undefined;
    automaticNameDelimiter?: string | undefined;
    test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
    priority?: number | undefined;
    enforce?: boolean | undefined;
    filename?: string | undefined;
    reuseExistingChunk?: boolean | undefined;
    type?: string | RegExp | undefined;
    idHint?: string | undefined;
}, {
    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
    minChunks?: number | undefined;
    name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
    minSize?: number | undefined;
    maxSize?: number | undefined;
    maxAsyncSize?: number | undefined;
    maxInitialSize?: number | undefined;
    automaticNameDelimiter?: string | undefined;
    test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
    priority?: number | undefined;
    enforce?: boolean | undefined;
    filename?: string | undefined;
    reuseExistingChunk?: boolean | undefined;
    type?: string | RegExp | undefined;
    idHint?: string | undefined;
}>;
export type OptimizationSplitChunksCacheGroup = z.infer<typeof optimizationSplitChunksCacheGroup>;
declare const optimizationSplitChunksOptions: z.ZodObject<{
    chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
    minChunks: z.ZodOptional<z.ZodNumber>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
    minSize: z.ZodOptional<z.ZodNumber>;
    maxSize: z.ZodOptional<z.ZodNumber>;
    maxAsyncSize: z.ZodOptional<z.ZodNumber>;
    maxInitialSize: z.ZodOptional<z.ZodNumber>;
    automaticNameDelimiter: z.ZodOptional<z.ZodString>;
    cacheGroups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
        chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
        minChunks: z.ZodOptional<z.ZodNumber>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
        minSize: z.ZodOptional<z.ZodNumber>;
        maxSize: z.ZodOptional<z.ZodNumber>;
        maxAsyncSize: z.ZodOptional<z.ZodNumber>;
        maxInitialSize: z.ZodOptional<z.ZodNumber>;
        automaticNameDelimiter: z.ZodOptional<z.ZodString>;
        test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Module, z.ZodTypeDef, Module>], z.ZodUnknown>, z.ZodUnknown>]>>;
        priority: z.ZodOptional<z.ZodNumber>;
        enforce: z.ZodOptional<z.ZodBoolean>;
        filename: z.ZodOptional<z.ZodString>;
        reuseExistingChunk: z.ZodOptional<z.ZodBoolean>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>>;
        idHint: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
        priority?: number | undefined;
        enforce?: boolean | undefined;
        filename?: string | undefined;
        reuseExistingChunk?: boolean | undefined;
        type?: string | RegExp | undefined;
        idHint?: string | undefined;
    }, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
        priority?: number | undefined;
        enforce?: boolean | undefined;
        filename?: string | undefined;
        reuseExistingChunk?: boolean | undefined;
        type?: string | RegExp | undefined;
        idHint?: string | undefined;
    }>]>>>;
    maxAsyncRequests: z.ZodOptional<z.ZodNumber>;
    maxInitialRequests: z.ZodOptional<z.ZodNumber>;
    fallbackCacheGroup: z.ZodOptional<z.ZodObject<{
        chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
        minSize: z.ZodOptional<z.ZodNumber>;
        maxSize: z.ZodOptional<z.ZodNumber>;
        maxAsyncSize: z.ZodOptional<z.ZodNumber>;
        maxInitialSize: z.ZodOptional<z.ZodNumber>;
        automaticNameDelimiter: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
    }, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
    }>>;
    hidePathInfo: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
    minChunks?: number | undefined;
    name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
    minSize?: number | undefined;
    maxSize?: number | undefined;
    maxAsyncSize?: number | undefined;
    maxInitialSize?: number | undefined;
    automaticNameDelimiter?: string | undefined;
    cacheGroups?: Record<string, false | {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
        priority?: number | undefined;
        enforce?: boolean | undefined;
        filename?: string | undefined;
        reuseExistingChunk?: boolean | undefined;
        type?: string | RegExp | undefined;
        idHint?: string | undefined;
    }> | undefined;
    maxAsyncRequests?: number | undefined;
    maxInitialRequests?: number | undefined;
    fallbackCacheGroup?: {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
    } | undefined;
    hidePathInfo?: boolean | undefined;
}, {
    chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
    minChunks?: number | undefined;
    name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
    minSize?: number | undefined;
    maxSize?: number | undefined;
    maxAsyncSize?: number | undefined;
    maxInitialSize?: number | undefined;
    automaticNameDelimiter?: string | undefined;
    cacheGroups?: Record<string, false | {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
        priority?: number | undefined;
        enforce?: boolean | undefined;
        filename?: string | undefined;
        reuseExistingChunk?: boolean | undefined;
        type?: string | RegExp | undefined;
        idHint?: string | undefined;
    }> | undefined;
    maxAsyncRequests?: number | undefined;
    maxInitialRequests?: number | undefined;
    fallbackCacheGroup?: {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
    } | undefined;
    hidePathInfo?: boolean | undefined;
}>;
export type OptimizationSplitChunksOptions = z.infer<typeof optimizationSplitChunksOptions>;
declare const optimization: z.ZodObject<{
    moduleIds: z.ZodOptional<z.ZodEnum<["named", "deterministic"]>>;
    chunkIds: z.ZodOptional<z.ZodEnum<["named", "deterministic"]>>;
    minimize: z.ZodOptional<z.ZodBoolean>;
    minimizer: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"...">, z.ZodUnion<[z.ZodType<RspackPluginInstance, z.ZodTypeDef, RspackPluginInstance>, z.ZodType<RspackPluginFunction, z.ZodTypeDef, RspackPluginFunction>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>]>, "many">>;
    mergeDuplicateChunks: z.ZodOptional<z.ZodBoolean>;
    splitChunks: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
        chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
        minChunks: z.ZodOptional<z.ZodNumber>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
        minSize: z.ZodOptional<z.ZodNumber>;
        maxSize: z.ZodOptional<z.ZodNumber>;
        maxAsyncSize: z.ZodOptional<z.ZodNumber>;
        maxInitialSize: z.ZodOptional<z.ZodNumber>;
        automaticNameDelimiter: z.ZodOptional<z.ZodString>;
        cacheGroups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
            chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
            minChunks: z.ZodOptional<z.ZodNumber>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
            minSize: z.ZodOptional<z.ZodNumber>;
            maxSize: z.ZodOptional<z.ZodNumber>;
            maxAsyncSize: z.ZodOptional<z.ZodNumber>;
            maxInitialSize: z.ZodOptional<z.ZodNumber>;
            automaticNameDelimiter: z.ZodOptional<z.ZodString>;
            test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Module, z.ZodTypeDef, Module>], z.ZodUnknown>, z.ZodUnknown>]>>;
            priority: z.ZodOptional<z.ZodNumber>;
            enforce: z.ZodOptional<z.ZodBoolean>;
            filename: z.ZodOptional<z.ZodString>;
            reuseExistingChunk: z.ZodOptional<z.ZodBoolean>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>>;
            idHint: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }>]>>>;
        maxAsyncRequests: z.ZodOptional<z.ZodNumber>;
        maxInitialRequests: z.ZodOptional<z.ZodNumber>;
        fallbackCacheGroup: z.ZodOptional<z.ZodObject<{
            chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
            minSize: z.ZodOptional<z.ZodNumber>;
            maxSize: z.ZodOptional<z.ZodNumber>;
            maxAsyncSize: z.ZodOptional<z.ZodNumber>;
            maxInitialSize: z.ZodOptional<z.ZodNumber>;
            automaticNameDelimiter: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        }, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        }>>;
        hidePathInfo: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        } | undefined;
        hidePathInfo?: boolean | undefined;
    }, {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        } | undefined;
        hidePathInfo?: boolean | undefined;
    }>]>>;
    runtimeChunk: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["single", "multiple"]>, z.ZodBoolean]>, z.ZodObject<{
        name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodString, z.ZodUndefined]>>]>>;
    }, "strict", z.ZodTypeAny, {
        name?: string | ((...args: unknown[]) => string | undefined) | undefined;
    }, {
        name?: string | ((...args: unknown[]) => string | undefined) | undefined;
    }>]>>;
    removeAvailableModules: z.ZodOptional<z.ZodBoolean>;
    removeEmptyChunks: z.ZodOptional<z.ZodBoolean>;
    realContentHash: z.ZodOptional<z.ZodBoolean>;
    sideEffects: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["flag"]>, z.ZodBoolean]>>;
    providedExports: z.ZodOptional<z.ZodBoolean>;
    innerGraph: z.ZodOptional<z.ZodBoolean>;
    usedExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["global"]>, z.ZodBoolean]>>;
    mangleExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["size", "deterministic"]>, z.ZodBoolean]>>;
    nodeEnv: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>>;
}, "strict", z.ZodTypeAny, {
    moduleIds?: "named" | "deterministic" | undefined;
    chunkIds?: "named" | "deterministic" | undefined;
    minimize?: boolean | undefined;
    minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
    mergeDuplicateChunks?: boolean | undefined;
    splitChunks?: false | {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        } | undefined;
        hidePathInfo?: boolean | undefined;
    } | undefined;
    runtimeChunk?: boolean | "multiple" | "single" | {
        name?: string | ((...args: unknown[]) => string | undefined) | undefined;
    } | undefined;
    removeAvailableModules?: boolean | undefined;
    removeEmptyChunks?: boolean | undefined;
    realContentHash?: boolean | undefined;
    sideEffects?: boolean | "flag" | undefined;
    providedExports?: boolean | undefined;
    innerGraph?: boolean | undefined;
    usedExports?: boolean | "global" | undefined;
    mangleExports?: boolean | "size" | "deterministic" | undefined;
    nodeEnv?: string | false | undefined;
}, {
    moduleIds?: "named" | "deterministic" | undefined;
    chunkIds?: "named" | "deterministic" | undefined;
    minimize?: boolean | undefined;
    minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
    mergeDuplicateChunks?: boolean | undefined;
    splitChunks?: false | {
        chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        automaticNameDelimiter?: string | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            filename?: string | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
        } | undefined;
        hidePathInfo?: boolean | undefined;
    } | undefined;
    runtimeChunk?: boolean | "multiple" | "single" | {
        name?: string | ((...args: unknown[]) => string | undefined) | undefined;
    } | undefined;
    removeAvailableModules?: boolean | undefined;
    removeEmptyChunks?: boolean | undefined;
    realContentHash?: boolean | undefined;
    sideEffects?: boolean | "flag" | undefined;
    providedExports?: boolean | undefined;
    innerGraph?: boolean | undefined;
    usedExports?: boolean | "global" | undefined;
    mangleExports?: boolean | "size" | "deterministic" | undefined;
    nodeEnv?: string | false | undefined;
}>;
export type Optimization = z.infer<typeof optimization>;
declare const incrementalRebuildOptions: z.ZodObject<{
    make: z.ZodOptional<z.ZodBoolean>;
    emitAsset: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    make?: boolean | undefined;
    emitAsset?: boolean | undefined;
}, {
    make?: boolean | undefined;
    emitAsset?: boolean | undefined;
}>;
export type IncrementalRebuildOptions = z.infer<typeof incrementalRebuildOptions>;
declare const rspackFutureOptions: z.ZodObject<{
    newResolver: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, boolean | undefined>;
    newTreeshaking: z.ZodOptional<z.ZodBoolean>;
    disableTransformByDefault: z.ZodOptional<z.ZodBoolean>;
    disableApplyEntryLazily: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    newResolver?: boolean | undefined;
    newTreeshaking?: boolean | undefined;
    disableTransformByDefault?: boolean | undefined;
    disableApplyEntryLazily?: boolean | undefined;
}, {
    newResolver?: boolean | undefined;
    newTreeshaking?: boolean | undefined;
    disableTransformByDefault?: boolean | undefined;
    disableApplyEntryLazily?: boolean | undefined;
}>;
export type RspackFutureOptions = z.infer<typeof rspackFutureOptions>;
declare const experiments: z.ZodObject<{
    lazyCompilation: z.ZodOptional<z.ZodBoolean>;
    incrementalRebuild: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        make: z.ZodOptional<z.ZodBoolean>;
        emitAsset: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    }, {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    }>]>>, boolean | {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    } | undefined, boolean | {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    } | undefined>;
    asyncWebAssembly: z.ZodOptional<z.ZodBoolean>;
    outputModule: z.ZodOptional<z.ZodBoolean>;
    topLevelAwait: z.ZodOptional<z.ZodBoolean>;
    newSplitChunks: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, boolean | undefined>;
    css: z.ZodOptional<z.ZodBoolean>;
    futureDefaults: z.ZodOptional<z.ZodBoolean>;
    rspackFuture: z.ZodOptional<z.ZodObject<{
        newResolver: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, boolean | undefined>;
        newTreeshaking: z.ZodOptional<z.ZodBoolean>;
        disableTransformByDefault: z.ZodOptional<z.ZodBoolean>;
        disableApplyEntryLazily: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        newResolver?: boolean | undefined;
        newTreeshaking?: boolean | undefined;
        disableTransformByDefault?: boolean | undefined;
        disableApplyEntryLazily?: boolean | undefined;
    }, {
        newResolver?: boolean | undefined;
        newTreeshaking?: boolean | undefined;
        disableTransformByDefault?: boolean | undefined;
        disableApplyEntryLazily?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    lazyCompilation?: boolean | undefined;
    incrementalRebuild?: boolean | {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    } | undefined;
    asyncWebAssembly?: boolean | undefined;
    outputModule?: boolean | undefined;
    topLevelAwait?: boolean | undefined;
    newSplitChunks?: boolean | undefined;
    css?: boolean | undefined;
    futureDefaults?: boolean | undefined;
    rspackFuture?: {
        newResolver?: boolean | undefined;
        newTreeshaking?: boolean | undefined;
        disableTransformByDefault?: boolean | undefined;
        disableApplyEntryLazily?: boolean | undefined;
    } | undefined;
}, {
    lazyCompilation?: boolean | undefined;
    incrementalRebuild?: boolean | {
        make?: boolean | undefined;
        emitAsset?: boolean | undefined;
    } | undefined;
    asyncWebAssembly?: boolean | undefined;
    outputModule?: boolean | undefined;
    topLevelAwait?: boolean | undefined;
    newSplitChunks?: boolean | undefined;
    css?: boolean | undefined;
    futureDefaults?: boolean | undefined;
    rspackFuture?: {
        newResolver?: boolean | undefined;
        newTreeshaking?: boolean | undefined;
        disableTransformByDefault?: boolean | undefined;
        disableApplyEntryLazily?: boolean | undefined;
    } | undefined;
}>;
export type Experiments = z.infer<typeof experiments>;
declare const watch: z.ZodBoolean;
export type Watch = z.infer<typeof watch>;
declare const watchOptions: z.ZodObject<{
    aggregateTimeout: z.ZodOptional<z.ZodNumber>;
    followSymlinks: z.ZodOptional<z.ZodBoolean>;
    ignored: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodString]>>;
    poll: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodBoolean]>>;
    stdin: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    aggregateTimeout?: number | undefined;
    followSymlinks?: boolean | undefined;
    ignored?: string | RegExp | string[] | undefined;
    poll?: number | boolean | undefined;
    stdin?: boolean | undefined;
}, {
    aggregateTimeout?: number | undefined;
    followSymlinks?: boolean | undefined;
    ignored?: string | RegExp | string[] | undefined;
    poll?: number | boolean | undefined;
    stdin?: boolean | undefined;
}>;
export type WatchOptions = z.infer<typeof watchOptions>;
export interface DevServer extends webpackDevServer.Configuration {
    hot?: boolean;
}
declare const ignoreWarnings: z.ZodArray<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodType<Error, z.ZodTypeDef, Error>, z.ZodType<Compilation, z.ZodTypeDef, Compilation>], z.ZodUnknown>, z.ZodBoolean>]>, "many">;
export type IgnoreWarnings = z.infer<typeof ignoreWarnings>;
declare const profile: z.ZodBoolean;
export type Profile = z.infer<typeof profile>;
declare const bail: z.ZodBoolean;
export type Bail = z.infer<typeof bail>;
declare const builtins: z.ZodType<oldBuiltins.Builtins, z.ZodTypeDef, oldBuiltins.Builtins>;
export type Builtins = z.infer<typeof builtins>;
export declare const rspackOptions: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    entry: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
        import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
        baseUri: z.ZodOptional<z.ZodString>;
        chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
        asyncChunks: z.ZodOptional<z.ZodBoolean>;
        wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
        filename: z.ZodOptional<z.ZodString>;
        library: z.ZodOptional<z.ZodObject<{
            amdContainer: z.ZodOptional<z.ZodString>;
            auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                commonjs2: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            }, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            }>]>>;
            export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            }, "strict", z.ZodTypeAny, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            }, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            }>]>>;
            type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
            umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        }, {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        import: (string | string[]) & (string | string[] | undefined);
        runtime?: string | false | undefined;
        publicPath?: string | undefined;
        baseUri?: string | undefined;
        chunkLoading?: string | false | undefined;
        asyncChunks?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        filename?: string | undefined;
        library?: {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
    }, {
        import: (string | string[]) & (string | string[] | undefined);
        runtime?: string | false | undefined;
        publicPath?: string | undefined;
        baseUri?: string | undefined;
        chunkLoading?: string | false | undefined;
        asyncChunks?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        filename?: string | undefined;
        library?: {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
    }>]>>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>]>>;
    output: z.ZodOptional<z.ZodObject<{
        path: z.ZodOptional<z.ZodString>;
        clean: z.ZodOptional<z.ZodBoolean>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
        filename: z.ZodOptional<z.ZodString>;
        chunkFilename: z.ZodOptional<z.ZodString>;
        crossOriginLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<["anonymous", "use-credentials"]>]>>;
        cssFilename: z.ZodOptional<z.ZodString>;
        cssChunkFilename: z.ZodOptional<z.ZodString>;
        hotUpdateMainFilename: z.ZodOptional<z.ZodString>;
        hotUpdateChunkFilename: z.ZodOptional<z.ZodString>;
        hotUpdateGlobal: z.ZodOptional<z.ZodString>;
        assetModuleFilename: z.ZodOptional<z.ZodString>;
        uniqueName: z.ZodOptional<z.ZodString>;
        chunkLoadingGlobal: z.ZodOptional<z.ZodString>;
        enabledLibraryTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>, "many">>;
        library: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        }>]>, z.ZodObject<{
            amdContainer: z.ZodOptional<z.ZodString>;
            auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                commonjs2: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            }, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            }>]>>;
            export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            }, "strict", z.ZodTypeAny, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            }, {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            }>]>>;
            type: z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>;
            umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        }, {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        }>]>>>;
        libraryExport: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        libraryTarget: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["var", "module", "assign", "assign-properties", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system"]>, z.ZodString]>>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        amdContainer: z.ZodOptional<z.ZodString>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }, {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        }>]>>;
        module: z.ZodOptional<z.ZodBoolean>;
        strictModuleExceptionHandling: z.ZodOptional<z.ZodBoolean>;
        strictModuleErrorHandling: z.ZodOptional<z.ZodBoolean>;
        globalObject: z.ZodOptional<z.ZodString>;
        importFunctionName: z.ZodOptional<z.ZodString>;
        iife: z.ZodOptional<z.ZodBoolean>;
        wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
        enabledWasmLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>, "many">>;
        webassemblyModuleFilename: z.ZodOptional<z.ZodString>;
        chunkFormat: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
        chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
        enabledChunkLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>, "many">>;
        trustedTypes: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<true>, z.ZodString]>, z.ZodObject<{
            policyName: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            policyName?: string | undefined;
        }, {
            policyName?: string | undefined;
        }>]>>;
        sourceMapFilename: z.ZodOptional<z.ZodString>;
        hashDigest: z.ZodOptional<z.ZodString>;
        hashDigestLength: z.ZodOptional<z.ZodNumber>;
        hashFunction: z.ZodOptional<z.ZodString>;
        hashSalt: z.ZodOptional<z.ZodString>;
        asyncChunks: z.ZodOptional<z.ZodBoolean>;
        workerChunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["jsonp", "import-scripts", "require", "async-node", "import"]>, z.ZodString]>]>>;
        workerWasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<["fetch-streaming", "fetch", "async-node"]>, z.ZodString]>]>>;
        workerPublicPath: z.ZodOptional<z.ZodString>;
        scriptType: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["text/javascript", "module"]>, z.ZodLiteral<false>]>>;
        devtoolNamespace: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        path?: string | undefined;
        clean?: boolean | undefined;
        publicPath?: string | undefined;
        filename?: string | undefined;
        chunkFilename?: string | undefined;
        crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
        cssFilename?: string | undefined;
        cssChunkFilename?: string | undefined;
        hotUpdateMainFilename?: string | undefined;
        hotUpdateChunkFilename?: string | undefined;
        hotUpdateGlobal?: string | undefined;
        assetModuleFilename?: string | undefined;
        uniqueName?: string | undefined;
        chunkLoadingGlobal?: string | undefined;
        enabledLibraryTypes?: string[] | undefined;
        library?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
        libraryExport?: string | string[] | undefined;
        libraryTarget?: string | undefined;
        umdNamedDefine?: boolean | undefined;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        module?: boolean | undefined;
        strictModuleExceptionHandling?: boolean | undefined;
        strictModuleErrorHandling?: boolean | undefined;
        globalObject?: string | undefined;
        importFunctionName?: string | undefined;
        iife?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        enabledWasmLoadingTypes?: string[] | undefined;
        webassemblyModuleFilename?: string | undefined;
        chunkFormat?: string | false | undefined;
        chunkLoading?: string | false | undefined;
        enabledChunkLoadingTypes?: string[] | undefined;
        trustedTypes?: string | true | {
            policyName?: string | undefined;
        } | undefined;
        sourceMapFilename?: string | undefined;
        hashDigest?: string | undefined;
        hashDigestLength?: number | undefined;
        hashFunction?: string | undefined;
        hashSalt?: string | undefined;
        asyncChunks?: boolean | undefined;
        workerChunkLoading?: string | false | undefined;
        workerWasmLoading?: string | false | undefined;
        workerPublicPath?: string | undefined;
        scriptType?: false | "module" | "text/javascript" | undefined;
        devtoolNamespace?: string | undefined;
    }, {
        path?: string | undefined;
        clean?: boolean | undefined;
        publicPath?: string | undefined;
        filename?: string | undefined;
        chunkFilename?: string | undefined;
        crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
        cssFilename?: string | undefined;
        cssChunkFilename?: string | undefined;
        hotUpdateMainFilename?: string | undefined;
        hotUpdateChunkFilename?: string | undefined;
        hotUpdateGlobal?: string | undefined;
        assetModuleFilename?: string | undefined;
        uniqueName?: string | undefined;
        chunkLoadingGlobal?: string | undefined;
        enabledLibraryTypes?: string[] | undefined;
        library?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
        libraryExport?: string | string[] | undefined;
        libraryTarget?: string | undefined;
        umdNamedDefine?: boolean | undefined;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        module?: boolean | undefined;
        strictModuleExceptionHandling?: boolean | undefined;
        strictModuleErrorHandling?: boolean | undefined;
        globalObject?: string | undefined;
        importFunctionName?: string | undefined;
        iife?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        enabledWasmLoadingTypes?: string[] | undefined;
        webassemblyModuleFilename?: string | undefined;
        chunkFormat?: string | false | undefined;
        chunkLoading?: string | false | undefined;
        enabledChunkLoadingTypes?: string[] | undefined;
        trustedTypes?: string | true | {
            policyName?: string | undefined;
        } | undefined;
        sourceMapFilename?: string | undefined;
        hashDigest?: string | undefined;
        hashDigestLength?: number | undefined;
        hashFunction?: string | undefined;
        hashSalt?: string | undefined;
        asyncChunks?: boolean | undefined;
        workerChunkLoading?: string | false | undefined;
        workerWasmLoading?: string | false | undefined;
        workerPublicPath?: string | undefined;
        scriptType?: false | "module" | "text/javascript" | undefined;
        devtoolNamespace?: string | undefined;
    }>>;
    target: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["web", "webworker", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "browserslist"]>, z.ZodLiteral<"node">]>, z.ZodLiteral<"async-node">]>, z.ZodType<`node${number}`, z.ZodTypeDef, `node${number}`>]>, z.ZodType<`async-node${number}`, z.ZodTypeDef, `async-node${number}`>]>, z.ZodType<`node${number}.${number}`, z.ZodTypeDef, `node${number}.${number}`>]>, z.ZodType<`async-node${number}.${number}`, z.ZodTypeDef, `async-node${number}.${number}`>]>, z.ZodLiteral<"electron-main">]>, z.ZodType<`electron${number}-main`, z.ZodTypeDef, `electron${number}-main`>]>, z.ZodType<`electron${number}.${number}-main`, z.ZodTypeDef, `electron${number}.${number}-main`>]>, z.ZodLiteral<"electron-renderer">]>, z.ZodType<`electron${number}-renderer`, z.ZodTypeDef, `electron${number}-renderer`>]>, z.ZodType<`electron${number}.${number}-renderer`, z.ZodTypeDef, `electron${number}.${number}-renderer`>]>, z.ZodLiteral<"electron-preload">]>, z.ZodType<`electron${number}-preload`, z.ZodTypeDef, `electron${number}-preload`>]>, z.ZodType<`electron${number}.${number}-preload`, z.ZodTypeDef, `electron${number}.${number}-preload`>]>]>, z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["web", "webworker", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "browserslist"]>, z.ZodLiteral<"node">]>, z.ZodLiteral<"async-node">]>, z.ZodType<`node${number}`, z.ZodTypeDef, `node${number}`>]>, z.ZodType<`async-node${number}`, z.ZodTypeDef, `async-node${number}`>]>, z.ZodType<`node${number}.${number}`, z.ZodTypeDef, `node${number}.${number}`>]>, z.ZodType<`async-node${number}.${number}`, z.ZodTypeDef, `async-node${number}.${number}`>]>, z.ZodLiteral<"electron-main">]>, z.ZodType<`electron${number}-main`, z.ZodTypeDef, `electron${number}-main`>]>, z.ZodType<`electron${number}.${number}-main`, z.ZodTypeDef, `electron${number}.${number}-main`>]>, z.ZodLiteral<"electron-renderer">]>, z.ZodType<`electron${number}-renderer`, z.ZodTypeDef, `electron${number}-renderer`>]>, z.ZodType<`electron${number}.${number}-renderer`, z.ZodTypeDef, `electron${number}.${number}-renderer`>]>, z.ZodLiteral<"electron-preload">]>, z.ZodType<`electron${number}-preload`, z.ZodTypeDef, `electron${number}-preload`>]>, z.ZodType<`electron${number}.${number}-preload`, z.ZodTypeDef, `electron${number}.${number}-preload`>]>, "many">]>>;
    mode: z.ZodOptional<z.ZodEnum<["development", "production", "none"]>>;
    experiments: z.ZodOptional<z.ZodObject<{
        lazyCompilation: z.ZodOptional<z.ZodBoolean>;
        incrementalRebuild: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
            make: z.ZodOptional<z.ZodBoolean>;
            emitAsset: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        }, {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        }>]>>, boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined, boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined>;
        asyncWebAssembly: z.ZodOptional<z.ZodBoolean>;
        outputModule: z.ZodOptional<z.ZodBoolean>;
        topLevelAwait: z.ZodOptional<z.ZodBoolean>;
        newSplitChunks: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, boolean | undefined>;
        css: z.ZodOptional<z.ZodBoolean>;
        futureDefaults: z.ZodOptional<z.ZodBoolean>;
        rspackFuture: z.ZodOptional<z.ZodObject<{
            newResolver: z.ZodEffects<z.ZodOptional<z.ZodBoolean>, boolean | undefined, boolean | undefined>;
            newTreeshaking: z.ZodOptional<z.ZodBoolean>;
            disableTransformByDefault: z.ZodOptional<z.ZodBoolean>;
            disableApplyEntryLazily: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        }, {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        lazyCompilation?: boolean | undefined;
        incrementalRebuild?: boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined;
        asyncWebAssembly?: boolean | undefined;
        outputModule?: boolean | undefined;
        topLevelAwait?: boolean | undefined;
        newSplitChunks?: boolean | undefined;
        css?: boolean | undefined;
        futureDefaults?: boolean | undefined;
        rspackFuture?: {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        } | undefined;
    }, {
        lazyCompilation?: boolean | undefined;
        incrementalRebuild?: boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined;
        asyncWebAssembly?: boolean | undefined;
        outputModule?: boolean | undefined;
        topLevelAwait?: boolean | undefined;
        newSplitChunks?: boolean | undefined;
        css?: boolean | undefined;
        futureDefaults?: boolean | undefined;
        rspackFuture?: {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        } | undefined;
    }>>;
    externals: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        context: z.ZodOptional<z.ZodString>;
        dependencyType: z.ZodOptional<z.ZodString>;
        request: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Error, z.ZodTypeDef, Error>>, z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>, z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>], z.ZodUnknown>, z.ZodVoid>], z.ZodUnknown>, z.ZodUnknown>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        context: z.ZodOptional<z.ZodString>;
        dependencyType: z.ZodOptional<z.ZodString>;
        request: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        context: z.ZodOptional<z.ZodString>;
        dependencyType: z.ZodOptional<z.ZodString>;
        request: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Error, z.ZodTypeDef, Error>>, z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>, z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>], z.ZodUnknown>, z.ZodVoid>], z.ZodUnknown>, z.ZodUnknown>]>, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        context: z.ZodOptional<z.ZodString>;
        dependencyType: z.ZodOptional<z.ZodString>;
        request: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString, "many">]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>>]>]>>;
    externalsType: z.ZodOptional<z.ZodEnum<["var", "module", "assign", "this", "window", "self", "global", "commonjs", "commonjs2", "commonjs-module", "commonjs-static", "amd", "amd-require", "umd", "umd2", "jsonp", "system", "promise", "import", "script", "node-commonjs"]>>;
    externalsPresets: z.ZodOptional<z.ZodObject<{
        node: z.ZodOptional<z.ZodBoolean>;
        web: z.ZodOptional<z.ZodBoolean>;
        webAsync: z.ZodOptional<z.ZodBoolean>;
        electron: z.ZodOptional<z.ZodBoolean>;
        electronMain: z.ZodOptional<z.ZodBoolean>;
        electronPreload: z.ZodOptional<z.ZodBoolean>;
        electronRenderer: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        node?: boolean | undefined;
        web?: boolean | undefined;
        webAsync?: boolean | undefined;
        electron?: boolean | undefined;
        electronMain?: boolean | undefined;
        electronPreload?: boolean | undefined;
        electronRenderer?: boolean | undefined;
    }, {
        node?: boolean | undefined;
        web?: boolean | undefined;
        webAsync?: boolean | undefined;
        electron?: boolean | undefined;
        electronMain?: boolean | undefined;
        electronPreload?: boolean | undefined;
        electronRenderer?: boolean | undefined;
    }>>;
    infrastructureLogging: z.ZodOptional<z.ZodObject<{
        appendOnly: z.ZodOptional<z.ZodBoolean>;
        colors: z.ZodOptional<z.ZodBoolean>;
        console: z.ZodOptional<z.ZodType<Console, z.ZodTypeDef, Console>>;
        debug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>]>>;
        level: z.ZodOptional<z.ZodEnum<["none", "error", "warn", "info", "log", "verbose"]>>;
        stream: z.ZodOptional<z.ZodType<NodeJS.WritableStream, z.ZodTypeDef, NodeJS.WritableStream>>;
    }, "strict", z.ZodTypeAny, {
        appendOnly?: boolean | undefined;
        colors?: boolean | undefined;
        console?: Console | undefined;
        debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        stream?: NodeJS.WritableStream | undefined;
    }, {
        appendOnly?: boolean | undefined;
        colors?: boolean | undefined;
        console?: Console | undefined;
        debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        stream?: NodeJS.WritableStream | undefined;
    }>>;
    cache: z.ZodOptional<z.ZodBoolean>;
    context: z.ZodOptional<z.ZodString>;
    devtool: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<["cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]>]>>;
    node: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
        __dirname: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
        __filename: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<["warn-mock", "mock", "eval-only"]>]>>;
        global: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"warn">]>>;
    }, "strict", z.ZodTypeAny, {
        __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        global?: boolean | "warn" | undefined;
    }, {
        __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        global?: boolean | "warn" | undefined;
    }>]>>;
    ignoreWarnings: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodType<Error, z.ZodTypeDef, Error>, z.ZodType<Compilation, z.ZodTypeDef, Compilation>], z.ZodUnknown>, z.ZodBoolean>]>, "many">>;
    watchOptions: z.ZodOptional<z.ZodObject<{
        aggregateTimeout: z.ZodOptional<z.ZodNumber>;
        followSymlinks: z.ZodOptional<z.ZodBoolean>;
        ignored: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodString]>>;
        poll: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodBoolean]>>;
        stdin: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        aggregateTimeout?: number | undefined;
        followSymlinks?: boolean | undefined;
        ignored?: string | RegExp | string[] | undefined;
        poll?: number | boolean | undefined;
        stdin?: boolean | undefined;
    }, {
        aggregateTimeout?: number | undefined;
        followSymlinks?: boolean | undefined;
        ignored?: string | RegExp | string[] | undefined;
        poll?: number | boolean | undefined;
        stdin?: boolean | undefined;
    }>>;
    watch: z.ZodOptional<z.ZodBoolean>;
    stats: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["none", "errors-only", "errors-warnings", "normal", "verbose"]>, z.ZodBoolean]>, z.ZodObject<{
        all: z.ZodOptional<z.ZodBoolean>;
        preset: z.ZodOptional<z.ZodEnum<["normal", "none", "verbose", "errors-only", "errors-warnings"]>>;
        assets: z.ZodOptional<z.ZodBoolean>;
        chunks: z.ZodOptional<z.ZodBoolean>;
        modules: z.ZodOptional<z.ZodBoolean>;
        entrypoints: z.ZodOptional<z.ZodBoolean>;
        chunkGroups: z.ZodOptional<z.ZodBoolean>;
        warnings: z.ZodOptional<z.ZodBoolean>;
        warningsCount: z.ZodOptional<z.ZodBoolean>;
        errors: z.ZodOptional<z.ZodBoolean>;
        errorsCount: z.ZodOptional<z.ZodBoolean>;
        colors: z.ZodOptional<z.ZodBoolean>;
        hash: z.ZodOptional<z.ZodBoolean>;
        version: z.ZodOptional<z.ZodBoolean>;
        reasons: z.ZodOptional<z.ZodBoolean>;
        publicPath: z.ZodOptional<z.ZodBoolean>;
        outputPath: z.ZodOptional<z.ZodBoolean>;
        chunkModules: z.ZodOptional<z.ZodBoolean>;
        chunkRelations: z.ZodOptional<z.ZodBoolean>;
        ids: z.ZodOptional<z.ZodBoolean>;
        timings: z.ZodOptional<z.ZodBoolean>;
        builtAt: z.ZodOptional<z.ZodBoolean>;
        moduleAssets: z.ZodOptional<z.ZodBoolean>;
        modulesSpace: z.ZodOptional<z.ZodNumber>;
        nestedModules: z.ZodOptional<z.ZodBoolean>;
        source: z.ZodOptional<z.ZodBoolean>;
        logging: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["none", "error", "warn", "info", "log", "verbose"]>, z.ZodBoolean]>>;
        loggingDebug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>, "many">, z.ZodUnion<[z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodString]>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>]>]>]>>;
        loggingTrace: z.ZodOptional<z.ZodBoolean>;
        runtimeModules: z.ZodOptional<z.ZodBoolean>;
        children: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        all?: boolean | undefined;
        preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
        assets?: boolean | undefined;
        chunks?: boolean | undefined;
        modules?: boolean | undefined;
        entrypoints?: boolean | undefined;
        chunkGroups?: boolean | undefined;
        warnings?: boolean | undefined;
        warningsCount?: boolean | undefined;
        errors?: boolean | undefined;
        errorsCount?: boolean | undefined;
        colors?: boolean | undefined;
        hash?: boolean | undefined;
        version?: boolean | undefined;
        reasons?: boolean | undefined;
        publicPath?: boolean | undefined;
        outputPath?: boolean | undefined;
        chunkModules?: boolean | undefined;
        chunkRelations?: boolean | undefined;
        ids?: boolean | undefined;
        timings?: boolean | undefined;
        builtAt?: boolean | undefined;
        moduleAssets?: boolean | undefined;
        modulesSpace?: number | undefined;
        nestedModules?: boolean | undefined;
        source?: boolean | undefined;
        logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        loggingTrace?: boolean | undefined;
        runtimeModules?: boolean | undefined;
        children?: boolean | undefined;
    }, {
        all?: boolean | undefined;
        preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
        assets?: boolean | undefined;
        chunks?: boolean | undefined;
        modules?: boolean | undefined;
        entrypoints?: boolean | undefined;
        chunkGroups?: boolean | undefined;
        warnings?: boolean | undefined;
        warningsCount?: boolean | undefined;
        errors?: boolean | undefined;
        errorsCount?: boolean | undefined;
        colors?: boolean | undefined;
        hash?: boolean | undefined;
        version?: boolean | undefined;
        reasons?: boolean | undefined;
        publicPath?: boolean | undefined;
        outputPath?: boolean | undefined;
        chunkModules?: boolean | undefined;
        chunkRelations?: boolean | undefined;
        ids?: boolean | undefined;
        timings?: boolean | undefined;
        builtAt?: boolean | undefined;
        moduleAssets?: boolean | undefined;
        modulesSpace?: number | undefined;
        nestedModules?: boolean | undefined;
        source?: boolean | undefined;
        logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        loggingTrace?: boolean | undefined;
        runtimeModules?: boolean | undefined;
        children?: boolean | undefined;
    }>]>>;
    snapshot: z.ZodOptional<z.ZodObject<{
        module: z.ZodOptional<z.ZodObject<{
            hash: z.ZodOptional<z.ZodBoolean>;
            timestamp: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        }, {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        }>>;
        resolve: z.ZodOptional<z.ZodObject<{
            hash: z.ZodOptional<z.ZodBoolean>;
            timestamp: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        }, {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        module?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
        resolve?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
    }, {
        module?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
        resolve?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
    }>>;
    optimization: z.ZodOptional<z.ZodObject<{
        moduleIds: z.ZodOptional<z.ZodEnum<["named", "deterministic"]>>;
        chunkIds: z.ZodOptional<z.ZodEnum<["named", "deterministic"]>>;
        minimize: z.ZodOptional<z.ZodBoolean>;
        minimizer: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"...">, z.ZodUnion<[z.ZodType<RspackPluginInstance, z.ZodTypeDef, RspackPluginInstance>, z.ZodType<RspackPluginFunction, z.ZodTypeDef, RspackPluginFunction>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>]>, "many">>;
        mergeDuplicateChunks: z.ZodOptional<z.ZodBoolean>;
        splitChunks: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
            chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
            minChunks: z.ZodOptional<z.ZodNumber>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
            minSize: z.ZodOptional<z.ZodNumber>;
            maxSize: z.ZodOptional<z.ZodNumber>;
            maxAsyncSize: z.ZodOptional<z.ZodNumber>;
            maxInitialSize: z.ZodOptional<z.ZodNumber>;
            automaticNameDelimiter: z.ZodOptional<z.ZodString>;
            cacheGroups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
                chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
                minChunks: z.ZodOptional<z.ZodNumber>;
                name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodType<Module, z.ZodTypeDef, Module>>], z.ZodUnknown>, z.ZodUnknown>]>>;
                minSize: z.ZodOptional<z.ZodNumber>;
                maxSize: z.ZodOptional<z.ZodNumber>;
                maxAsyncSize: z.ZodOptional<z.ZodNumber>;
                maxInitialSize: z.ZodOptional<z.ZodNumber>;
                automaticNameDelimiter: z.ZodOptional<z.ZodString>;
                test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Module, z.ZodTypeDef, Module>], z.ZodUnknown>, z.ZodUnknown>]>>;
                priority: z.ZodOptional<z.ZodNumber>;
                enforce: z.ZodOptional<z.ZodBoolean>;
                filename: z.ZodOptional<z.ZodString>;
                reuseExistingChunk: z.ZodOptional<z.ZodBoolean>;
                type: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>>;
                idHint: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }, {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }>]>>>;
            maxAsyncRequests: z.ZodOptional<z.ZodNumber>;
            maxInitialRequests: z.ZodOptional<z.ZodNumber>;
            fallbackCacheGroup: z.ZodOptional<z.ZodObject<{
                chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["initial", "async", "all"]>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Chunk, z.ZodTypeDef, Chunk>], z.ZodUnknown>, z.ZodBoolean>]>>;
                minSize: z.ZodOptional<z.ZodNumber>;
                maxSize: z.ZodOptional<z.ZodNumber>;
                maxAsyncSize: z.ZodOptional<z.ZodNumber>;
                maxInitialSize: z.ZodOptional<z.ZodNumber>;
                automaticNameDelimiter: z.ZodOptional<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            }, {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            }>>;
            hidePathInfo: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        }, {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        }>]>>;
        runtimeChunk: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<["single", "multiple"]>, z.ZodBoolean]>, z.ZodObject<{
            name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodString, z.ZodUndefined]>>]>>;
        }, "strict", z.ZodTypeAny, {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        }, {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        }>]>>;
        removeAvailableModules: z.ZodOptional<z.ZodBoolean>;
        removeEmptyChunks: z.ZodOptional<z.ZodBoolean>;
        realContentHash: z.ZodOptional<z.ZodBoolean>;
        sideEffects: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["flag"]>, z.ZodBoolean]>>;
        providedExports: z.ZodOptional<z.ZodBoolean>;
        innerGraph: z.ZodOptional<z.ZodBoolean>;
        usedExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["global"]>, z.ZodBoolean]>>;
        mangleExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["size", "deterministic"]>, z.ZodBoolean]>>;
        nodeEnv: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>>;
    }, "strict", z.ZodTypeAny, {
        moduleIds?: "named" | "deterministic" | undefined;
        chunkIds?: "named" | "deterministic" | undefined;
        minimize?: boolean | undefined;
        minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
        mergeDuplicateChunks?: boolean | undefined;
        splitChunks?: false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        } | undefined;
        runtimeChunk?: boolean | "multiple" | "single" | {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        } | undefined;
        removeAvailableModules?: boolean | undefined;
        removeEmptyChunks?: boolean | undefined;
        realContentHash?: boolean | undefined;
        sideEffects?: boolean | "flag" | undefined;
        providedExports?: boolean | undefined;
        innerGraph?: boolean | undefined;
        usedExports?: boolean | "global" | undefined;
        mangleExports?: boolean | "size" | "deterministic" | undefined;
        nodeEnv?: string | false | undefined;
    }, {
        moduleIds?: "named" | "deterministic" | undefined;
        chunkIds?: "named" | "deterministic" | undefined;
        minimize?: boolean | undefined;
        minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
        mergeDuplicateChunks?: boolean | undefined;
        splitChunks?: false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        } | undefined;
        runtimeChunk?: boolean | "multiple" | "single" | {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        } | undefined;
        removeAvailableModules?: boolean | undefined;
        removeEmptyChunks?: boolean | undefined;
        realContentHash?: boolean | undefined;
        sideEffects?: boolean | "flag" | undefined;
        providedExports?: boolean | undefined;
        innerGraph?: boolean | undefined;
        usedExports?: boolean | "global" | undefined;
        mangleExports?: boolean | "size" | "deterministic" | undefined;
        nodeEnv?: string | false | undefined;
    }>>;
    resolve: z.ZodOptional<z.ZodType<ResolveOptions, z.ZodTypeDef, ResolveOptions>>;
    resolveLoader: z.ZodOptional<z.ZodType<ResolveOptions, z.ZodTypeDef, ResolveOptions>>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodType<RspackPluginInstance, z.ZodTypeDef, RspackPluginInstance>, z.ZodType<RspackPluginFunction, z.ZodTypeDef, RspackPluginFunction>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">>;
    devServer: z.ZodOptional<z.ZodType<DevServer, z.ZodTypeDef, DevServer>>;
    builtins: z.ZodOptional<z.ZodType<oldBuiltins.Builtins, z.ZodTypeDef, oldBuiltins.Builtins>>;
    module: z.ZodOptional<z.ZodObject<{
        defaultRules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<RuleSetRule, z.ZodTypeDef, RuleSetRule>]>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">>;
        rules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<RuleSetRule, z.ZodTypeDef, RuleSetRule>]>, z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>, "many">>;
        parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            asset: z.ZodOptional<z.ZodObject<{
                dataUrlCondition: z.ZodOptional<z.ZodObject<{
                    maxSize: z.ZodOptional<z.ZodNumber>;
                }, "strict", z.ZodTypeAny, {
                    maxSize?: number | undefined;
                }, {
                    maxSize?: number | undefined;
                }>>;
            }, "strict", z.ZodTypeAny, {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            }, {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            }>>;
            javascript: z.ZodOptional<z.ZodObject<{
                dynamicImportMode: z.ZodOptional<z.ZodEnum<["eager", "lazy"]>>;
                dynamicImportPreload: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
                dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber]>>;
                url: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"relative">, z.ZodBoolean]>>;
            }, "strict", z.ZodTypeAny, {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            }, {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        }, {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        }>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>>;
        generator: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            asset: z.ZodOptional<z.ZodObject<{
                dataUrl: z.ZodOptional<z.ZodObject<{
                    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                    mimetype: z.ZodOptional<z.ZodString>;
                }, "strict", z.ZodTypeAny, {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                }, {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                }>>;
                filename: z.ZodOptional<z.ZodString>;
                publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
            }, "strict", z.ZodTypeAny, {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            }, {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            }>>;
            "asset/inline": z.ZodOptional<z.ZodObject<{
                dataUrl: z.ZodOptional<z.ZodObject<{
                    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                    mimetype: z.ZodOptional<z.ZodString>;
                }, "strict", z.ZodTypeAny, {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                }, {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                }>>;
            }, "strict", z.ZodTypeAny, {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            }, {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            }>>;
            "asset/resource": z.ZodOptional<z.ZodObject<{
                filename: z.ZodOptional<z.ZodString>;
                publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodString]>>;
            }, "strict", z.ZodTypeAny, {
                filename?: string | undefined;
                publicPath?: string | undefined;
            }, {
                filename?: string | undefined;
                publicPath?: string | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        }, {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        }>, z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>]>>;
    }, "strict", z.ZodTypeAny, {
        defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        parser?: {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        } | Record<string, Record<string, any>> | undefined;
        generator?: Record<string, Record<string, any>> | {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        } | undefined;
    }, {
        defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        parser?: {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        } | Record<string, Record<string, any>> | undefined;
        generator?: Record<string, Record<string, any>> | {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        } | undefined;
    }>>;
    profile: z.ZodOptional<z.ZodBoolean>;
    bail: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    name?: string | undefined;
    dependencies?: string[] | undefined;
    entry?: string | string[] | Record<string, string | string[] | {
        import: (string | string[]) & (string | string[] | undefined);
        runtime?: string | false | undefined;
        publicPath?: string | undefined;
        baseUri?: string | undefined;
        chunkLoading?: string | false | undefined;
        asyncChunks?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        filename?: string | undefined;
        library?: {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
    }> | undefined;
    output?: {
        path?: string | undefined;
        clean?: boolean | undefined;
        publicPath?: string | undefined;
        filename?: string | undefined;
        chunkFilename?: string | undefined;
        crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
        cssFilename?: string | undefined;
        cssChunkFilename?: string | undefined;
        hotUpdateMainFilename?: string | undefined;
        hotUpdateChunkFilename?: string | undefined;
        hotUpdateGlobal?: string | undefined;
        assetModuleFilename?: string | undefined;
        uniqueName?: string | undefined;
        chunkLoadingGlobal?: string | undefined;
        enabledLibraryTypes?: string[] | undefined;
        library?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
        libraryExport?: string | string[] | undefined;
        libraryTarget?: string | undefined;
        umdNamedDefine?: boolean | undefined;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        module?: boolean | undefined;
        strictModuleExceptionHandling?: boolean | undefined;
        strictModuleErrorHandling?: boolean | undefined;
        globalObject?: string | undefined;
        importFunctionName?: string | undefined;
        iife?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        enabledWasmLoadingTypes?: string[] | undefined;
        webassemblyModuleFilename?: string | undefined;
        chunkFormat?: string | false | undefined;
        chunkLoading?: string | false | undefined;
        enabledChunkLoadingTypes?: string[] | undefined;
        trustedTypes?: string | true | {
            policyName?: string | undefined;
        } | undefined;
        sourceMapFilename?: string | undefined;
        hashDigest?: string | undefined;
        hashDigestLength?: number | undefined;
        hashFunction?: string | undefined;
        hashSalt?: string | undefined;
        asyncChunks?: boolean | undefined;
        workerChunkLoading?: string | false | undefined;
        workerWasmLoading?: string | false | undefined;
        workerPublicPath?: string | undefined;
        scriptType?: false | "module" | "text/javascript" | undefined;
        devtoolNamespace?: string | undefined;
    } | undefined;
    target?: false | "node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload` | ("node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload`)[] | undefined;
    mode?: "production" | "development" | "none" | undefined;
    experiments?: {
        lazyCompilation?: boolean | undefined;
        incrementalRebuild?: boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined;
        asyncWebAssembly?: boolean | undefined;
        outputModule?: boolean | undefined;
        topLevelAwait?: boolean | undefined;
        newSplitChunks?: boolean | undefined;
        css?: boolean | undefined;
        futureDefaults?: boolean | undefined;
        rspackFuture?: {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        } | undefined;
    } | undefined;
    externals?: string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>) | (string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>))[] | undefined;
    externalsType?: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined;
    externalsPresets?: {
        node?: boolean | undefined;
        web?: boolean | undefined;
        webAsync?: boolean | undefined;
        electron?: boolean | undefined;
        electronMain?: boolean | undefined;
        electronPreload?: boolean | undefined;
        electronRenderer?: boolean | undefined;
    } | undefined;
    infrastructureLogging?: {
        appendOnly?: boolean | undefined;
        colors?: boolean | undefined;
        console?: Console | undefined;
        debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        stream?: NodeJS.WritableStream | undefined;
    } | undefined;
    cache?: boolean | undefined;
    context?: string | undefined;
    devtool?: false | "cheap-source-map" | "cheap-module-source-map" | "source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | "nosources-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "hidden-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | undefined;
    node?: false | {
        __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        global?: boolean | "warn" | undefined;
    } | undefined;
    ignoreWarnings?: (RegExp | ((args_0: Error, args_1: Compilation, ...args_2: unknown[]) => boolean))[] | undefined;
    watchOptions?: {
        aggregateTimeout?: number | undefined;
        followSymlinks?: boolean | undefined;
        ignored?: string | RegExp | string[] | undefined;
        poll?: number | boolean | undefined;
        stdin?: boolean | undefined;
    } | undefined;
    watch?: boolean | undefined;
    stats?: boolean | "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | {
        all?: boolean | undefined;
        preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
        assets?: boolean | undefined;
        chunks?: boolean | undefined;
        modules?: boolean | undefined;
        entrypoints?: boolean | undefined;
        chunkGroups?: boolean | undefined;
        warnings?: boolean | undefined;
        warningsCount?: boolean | undefined;
        errors?: boolean | undefined;
        errorsCount?: boolean | undefined;
        colors?: boolean | undefined;
        hash?: boolean | undefined;
        version?: boolean | undefined;
        reasons?: boolean | undefined;
        publicPath?: boolean | undefined;
        outputPath?: boolean | undefined;
        chunkModules?: boolean | undefined;
        chunkRelations?: boolean | undefined;
        ids?: boolean | undefined;
        timings?: boolean | undefined;
        builtAt?: boolean | undefined;
        moduleAssets?: boolean | undefined;
        modulesSpace?: number | undefined;
        nestedModules?: boolean | undefined;
        source?: boolean | undefined;
        logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        loggingTrace?: boolean | undefined;
        runtimeModules?: boolean | undefined;
        children?: boolean | undefined;
    } | undefined;
    snapshot?: {
        module?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
        resolve?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
    } | undefined;
    optimization?: {
        moduleIds?: "named" | "deterministic" | undefined;
        chunkIds?: "named" | "deterministic" | undefined;
        minimize?: boolean | undefined;
        minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
        mergeDuplicateChunks?: boolean | undefined;
        splitChunks?: false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        } | undefined;
        runtimeChunk?: boolean | "multiple" | "single" | {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        } | undefined;
        removeAvailableModules?: boolean | undefined;
        removeEmptyChunks?: boolean | undefined;
        realContentHash?: boolean | undefined;
        sideEffects?: boolean | "flag" | undefined;
        providedExports?: boolean | undefined;
        innerGraph?: boolean | undefined;
        usedExports?: boolean | "global" | undefined;
        mangleExports?: boolean | "size" | "deterministic" | undefined;
        nodeEnv?: string | false | undefined;
    } | undefined;
    resolve?: ResolveOptions | undefined;
    resolveLoader?: ResolveOptions | undefined;
    plugins?: (false | "" | 0 | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
    devServer?: DevServer | undefined;
    builtins?: oldBuiltins.Builtins | undefined;
    module?: {
        defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        parser?: {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        } | Record<string, Record<string, any>> | undefined;
        generator?: Record<string, Record<string, any>> | {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
    profile?: boolean | undefined;
    bail?: boolean | undefined;
}, {
    name?: string | undefined;
    dependencies?: string[] | undefined;
    entry?: string | string[] | Record<string, string | string[] | {
        import: (string | string[]) & (string | string[] | undefined);
        runtime?: string | false | undefined;
        publicPath?: string | undefined;
        baseUri?: string | undefined;
        chunkLoading?: string | false | undefined;
        asyncChunks?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        filename?: string | undefined;
        library?: {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
    }> | undefined;
    output?: {
        path?: string | undefined;
        clean?: boolean | undefined;
        publicPath?: string | undefined;
        filename?: string | undefined;
        chunkFilename?: string | undefined;
        crossOriginLoading?: false | "anonymous" | "use-credentials" | undefined;
        cssFilename?: string | undefined;
        cssChunkFilename?: string | undefined;
        hotUpdateMainFilename?: string | undefined;
        hotUpdateChunkFilename?: string | undefined;
        hotUpdateGlobal?: string | undefined;
        assetModuleFilename?: string | undefined;
        uniqueName?: string | undefined;
        chunkLoadingGlobal?: string | undefined;
        enabledLibraryTypes?: string[] | undefined;
        library?: string | string[] | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            root?: string | string[] | undefined;
        } | {
            type: string;
            amdContainer?: string | undefined;
            auxiliaryComment?: string | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                commonjs2?: string | undefined;
                root?: string | undefined;
            } | undefined;
            export?: string | string[] | undefined;
            name?: string | string[] | {
                amd?: string | undefined;
                commonjs?: string | undefined;
                root?: string | string[] | undefined;
            } | undefined;
            umdNamedDefine?: boolean | undefined;
        } | undefined;
        libraryExport?: string | string[] | undefined;
        libraryTarget?: string | undefined;
        umdNamedDefine?: boolean | undefined;
        amdContainer?: string | undefined;
        auxiliaryComment?: string | {
            amd?: string | undefined;
            commonjs?: string | undefined;
            commonjs2?: string | undefined;
            root?: string | undefined;
        } | undefined;
        module?: boolean | undefined;
        strictModuleExceptionHandling?: boolean | undefined;
        strictModuleErrorHandling?: boolean | undefined;
        globalObject?: string | undefined;
        importFunctionName?: string | undefined;
        iife?: boolean | undefined;
        wasmLoading?: string | false | undefined;
        enabledWasmLoadingTypes?: string[] | undefined;
        webassemblyModuleFilename?: string | undefined;
        chunkFormat?: string | false | undefined;
        chunkLoading?: string | false | undefined;
        enabledChunkLoadingTypes?: string[] | undefined;
        trustedTypes?: string | true | {
            policyName?: string | undefined;
        } | undefined;
        sourceMapFilename?: string | undefined;
        hashDigest?: string | undefined;
        hashDigestLength?: number | undefined;
        hashFunction?: string | undefined;
        hashSalt?: string | undefined;
        asyncChunks?: boolean | undefined;
        workerChunkLoading?: string | false | undefined;
        workerWasmLoading?: string | false | undefined;
        workerPublicPath?: string | undefined;
        scriptType?: false | "module" | "text/javascript" | undefined;
        devtoolNamespace?: string | undefined;
    } | undefined;
    target?: false | "node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload` | ("node" | "async-node" | "es5" | "web" | "webworker" | "es3" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "browserslist" | `node${number}` | `async-node${number}` | `node${number}.${number}` | `async-node${number}.${number}` | "electron-main" | `electron${number}-main` | `electron${number}.${number}-main` | "electron-renderer" | `electron${number}-renderer` | `electron${number}.${number}-renderer` | "electron-preload" | `electron${number}-preload` | `electron${number}.${number}-preload`)[] | undefined;
    mode?: "production" | "development" | "none" | undefined;
    experiments?: {
        lazyCompilation?: boolean | undefined;
        incrementalRebuild?: boolean | {
            make?: boolean | undefined;
            emitAsset?: boolean | undefined;
        } | undefined;
        asyncWebAssembly?: boolean | undefined;
        outputModule?: boolean | undefined;
        topLevelAwait?: boolean | undefined;
        newSplitChunks?: boolean | undefined;
        css?: boolean | undefined;
        futureDefaults?: boolean | undefined;
        rspackFuture?: {
            newResolver?: boolean | undefined;
            newTreeshaking?: boolean | undefined;
            disableTransformByDefault?: boolean | undefined;
            disableApplyEntryLazily?: boolean | undefined;
        } | undefined;
    } | undefined;
    externals?: string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>) | (string | RegExp | Record<string, string | boolean | string[] | Record<string, string | string[]>> | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, args_1: (args_0: Error | undefined, args_1: string | boolean | string[] | Record<string, string | string[]> | undefined, args_2: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined, ...args_3: unknown[]) => void, ...args_2: unknown[]) => unknown) | ((args_0: {
        context?: string | undefined;
        dependencyType?: string | undefined;
        request?: string | undefined;
    }, ...args_1: unknown[]) => Promise<string | boolean | string[] | Record<string, string | string[]>>))[] | undefined;
    externalsType?: "module" | "promise" | "script" | "commonjs" | "jsonp" | "import" | "amd" | "commonjs2" | "var" | "assign" | "this" | "window" | "self" | "global" | "commonjs-module" | "commonjs-static" | "amd-require" | "umd" | "umd2" | "system" | "node-commonjs" | undefined;
    externalsPresets?: {
        node?: boolean | undefined;
        web?: boolean | undefined;
        webAsync?: boolean | undefined;
        electron?: boolean | undefined;
        electronMain?: boolean | undefined;
        electronPreload?: boolean | undefined;
        electronRenderer?: boolean | undefined;
    } | undefined;
    infrastructureLogging?: {
        appendOnly?: boolean | undefined;
        colors?: boolean | undefined;
        console?: Console | undefined;
        debug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        level?: "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        stream?: NodeJS.WritableStream | undefined;
    } | undefined;
    cache?: boolean | undefined;
    context?: string | undefined;
    devtool?: false | "cheap-source-map" | "cheap-module-source-map" | "source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "inline-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-source-map" | "nosources-cheap-source-map" | "nosources-cheap-module-source-map" | "nosources-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-source-map" | "hidden-cheap-source-map" | "hidden-cheap-module-source-map" | "hidden-source-map" | "eval-cheap-source-map" | "eval-cheap-module-source-map" | "eval-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-cheap-module-source-map" | "eval-nosources-source-map" | undefined;
    node?: false | {
        __dirname?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        __filename?: boolean | "warn-mock" | "mock" | "eval-only" | undefined;
        global?: boolean | "warn" | undefined;
    } | undefined;
    ignoreWarnings?: (RegExp | ((args_0: Error, args_1: Compilation, ...args_2: unknown[]) => boolean))[] | undefined;
    watchOptions?: {
        aggregateTimeout?: number | undefined;
        followSymlinks?: boolean | undefined;
        ignored?: string | RegExp | string[] | undefined;
        poll?: number | boolean | undefined;
        stdin?: boolean | undefined;
    } | undefined;
    watch?: boolean | undefined;
    stats?: boolean | "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | {
        all?: boolean | undefined;
        preset?: "none" | "normal" | "verbose" | "errors-only" | "errors-warnings" | undefined;
        assets?: boolean | undefined;
        chunks?: boolean | undefined;
        modules?: boolean | undefined;
        entrypoints?: boolean | undefined;
        chunkGroups?: boolean | undefined;
        warnings?: boolean | undefined;
        warningsCount?: boolean | undefined;
        errors?: boolean | undefined;
        errorsCount?: boolean | undefined;
        colors?: boolean | undefined;
        hash?: boolean | undefined;
        version?: boolean | undefined;
        reasons?: boolean | undefined;
        publicPath?: boolean | undefined;
        outputPath?: boolean | undefined;
        chunkModules?: boolean | undefined;
        chunkRelations?: boolean | undefined;
        ids?: boolean | undefined;
        timings?: boolean | undefined;
        builtAt?: boolean | undefined;
        moduleAssets?: boolean | undefined;
        modulesSpace?: number | undefined;
        nestedModules?: boolean | undefined;
        source?: boolean | undefined;
        logging?: boolean | "error" | "none" | "verbose" | "warn" | "info" | "log" | undefined;
        loggingDebug?: string | boolean | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean) | (string | RegExp | ((args_0: string, ...args_1: unknown[]) => boolean))[] | undefined;
        loggingTrace?: boolean | undefined;
        runtimeModules?: boolean | undefined;
        children?: boolean | undefined;
    } | undefined;
    snapshot?: {
        module?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
        resolve?: {
            hash?: boolean | undefined;
            timestamp?: boolean | undefined;
        } | undefined;
    } | undefined;
    optimization?: {
        moduleIds?: "named" | "deterministic" | undefined;
        chunkIds?: "named" | "deterministic" | undefined;
        minimize?: boolean | undefined;
        minimizer?: (false | "" | 0 | "..." | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
        mergeDuplicateChunks?: boolean | undefined;
        splitChunks?: false | {
            chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            automaticNameDelimiter?: string | undefined;
            cacheGroups?: Record<string, false | {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minChunks?: number | undefined;
                name?: string | false | ((args_0: Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
                test?: string | RegExp | ((args_0: Module, ...args_1: unknown[]) => unknown) | undefined;
                priority?: number | undefined;
                enforce?: boolean | undefined;
                filename?: string | undefined;
                reuseExistingChunk?: boolean | undefined;
                type?: string | RegExp | undefined;
                idHint?: string | undefined;
            }> | undefined;
            maxAsyncRequests?: number | undefined;
            maxInitialRequests?: number | undefined;
            fallbackCacheGroup?: {
                chunks?: RegExp | "async" | "initial" | "all" | ((args_0: Chunk, ...args_1: unknown[]) => boolean) | undefined;
                minSize?: number | undefined;
                maxSize?: number | undefined;
                maxAsyncSize?: number | undefined;
                maxInitialSize?: number | undefined;
                automaticNameDelimiter?: string | undefined;
            } | undefined;
            hidePathInfo?: boolean | undefined;
        } | undefined;
        runtimeChunk?: boolean | "multiple" | "single" | {
            name?: string | ((...args: unknown[]) => string | undefined) | undefined;
        } | undefined;
        removeAvailableModules?: boolean | undefined;
        removeEmptyChunks?: boolean | undefined;
        realContentHash?: boolean | undefined;
        sideEffects?: boolean | "flag" | undefined;
        providedExports?: boolean | undefined;
        innerGraph?: boolean | undefined;
        usedExports?: boolean | "global" | undefined;
        mangleExports?: boolean | "size" | "deterministic" | undefined;
        nodeEnv?: string | false | undefined;
    } | undefined;
    resolve?: ResolveOptions | undefined;
    resolveLoader?: ResolveOptions | undefined;
    plugins?: (false | "" | 0 | RspackPluginInstance | RspackPluginFunction | null | undefined)[] | undefined;
    devServer?: DevServer | undefined;
    builtins?: oldBuiltins.Builtins | undefined;
    module?: {
        defaultRules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        rules?: (false | "" | 0 | "..." | RuleSetRule | null | undefined)[] | undefined;
        parser?: {
            asset?: {
                dataUrlCondition?: {
                    maxSize?: number | undefined;
                } | undefined;
            } | undefined;
            javascript?: {
                dynamicImportMode?: "eager" | "lazy" | undefined;
                dynamicImportPreload?: number | boolean | undefined;
                dynamicImportPrefetch?: number | boolean | undefined;
                url?: boolean | "relative" | undefined;
            } | undefined;
        } | Record<string, Record<string, any>> | undefined;
        generator?: Record<string, Record<string, any>> | {
            asset?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
            "asset/inline"?: {
                dataUrl?: {
                    encoding?: false | "base64" | undefined;
                    mimetype?: string | undefined;
                } | undefined;
            } | undefined;
            "asset/resource"?: {
                filename?: string | undefined;
                publicPath?: string | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
    profile?: boolean | undefined;
    bail?: boolean | undefined;
}>;
export type RspackOptions = z.infer<typeof rspackOptions>;
export type Configuration = RspackOptions;
export {};
//# sourceMappingURL=zod.d.ts.map