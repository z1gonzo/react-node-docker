"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerReferencePlugin = void 0;
const base_1 = require("../builtin-plugin/base");
const ExternalsPlugin_1 = require("../builtin-plugin/ExternalsPlugin");
const options_1 = require("./options");
const ShareRuntimePlugin_1 = require("../sharing/ShareRuntimePlugin");
class ContainerReferencePlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        var _a;
        super();
        this.name = base_1.BuiltinPluginName.ContainerReferencePlugin;
        this._options = {
            remoteType: options.remoteType,
            remotes: (0, options_1.parseOptions)(options.remotes, item => ({
                external: Array.isArray(item) ? item : [item],
                shareScope: options.shareScope || "default"
            }), item => ({
                external: Array.isArray(item.external)
                    ? item.external
                    : [item.external],
                shareScope: item.shareScope || options.shareScope || "default"
            })),
            enhanced: (_a = options.enhanced) !== null && _a !== void 0 ? _a : false
        };
    }
    raw(compiler) {
        const { remoteType, remotes } = this._options;
        const remoteExternals = {};
        for (const [key, config] of remotes) {
            let i = 0;
            for (const external of config.external) {
                if (external.startsWith("internal "))
                    continue;
                remoteExternals[`webpack/container/reference/${key}${i ? `/fallback-${i}` : ""}`] = external;
                i++;
            }
        }
        new ExternalsPlugin_1.ExternalsPlugin(remoteType, remoteExternals).apply(compiler);
        new ShareRuntimePlugin_1.ShareRuntimePlugin(this._options.enhanced).apply(compiler);
        const rawOptions = {
            remoteType: this._options.remoteType,
            remotes: this._options.remotes.map(([key, r]) => ({ key, ...r })),
            enhanced: this._options.enhanced
        };
        return (0, base_1.createBuiltinPlugin)(this.name, rawOptions);
    }
}
exports.ContainerReferencePlugin = ContainerReferencePlugin;
//# sourceMappingURL=ContainerReferencePlugin.js.map